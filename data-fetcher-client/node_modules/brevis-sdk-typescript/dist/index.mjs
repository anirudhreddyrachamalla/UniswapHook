var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// proto/common/circuit_data.ts
import * as pb_1 from "google-protobuf";
var _one_of_decls;
var _AppCircuitInfo = class _AppCircuitInfo extends pb_1.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls, []);
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], __privateGet(this, _one_of_decls));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("output_commitment" in data && data.output_commitment != void 0) {
        this.output_commitment = data.output_commitment;
      }
      if ("vk" in data && data.vk != void 0) {
        this.vk = data.vk;
      }
      if ("input_commitments" in data && data.input_commitments != void 0) {
        this.input_commitments = data.input_commitments;
      }
      if ("toggles_commitment" in data && data.toggles_commitment != void 0) {
        this.toggles_commitment = data.toggles_commitment;
      }
      if ("toggles" in data && data.toggles != void 0) {
        this.toggles = data.toggles;
      }
      if ("use_callback" in data && data.use_callback != void 0) {
        this.use_callback = data.use_callback;
      }
      if ("output" in data && data.output != void 0) {
        this.output = data.output;
      }
      if ("vk_hash" in data && data.vk_hash != void 0) {
        this.vk_hash = data.vk_hash;
      }
      if ("input_commitments_root" in data && data.input_commitments_root != void 0) {
        this.input_commitments_root = data.input_commitments_root;
      }
      if ("witness" in data && data.witness != void 0) {
        this.witness = data.witness;
      }
      if ("max_receipts" in data && data.max_receipts != void 0) {
        this.max_receipts = data.max_receipts;
      }
      if ("max_storage" in data && data.max_storage != void 0) {
        this.max_storage = data.max_storage;
      }
      if ("max_tx" in data && data.max_tx != void 0) {
        this.max_tx = data.max_tx;
      }
      if ("max_num_data_points" in data && data.max_num_data_points != void 0) {
        this.max_num_data_points = data.max_num_data_points;
      }
    }
  }
  get output_commitment() {
    return pb_1.Message.getFieldWithDefault(this, 1, "");
  }
  set output_commitment(value) {
    pb_1.Message.setField(this, 1, value);
  }
  get vk() {
    return pb_1.Message.getFieldWithDefault(this, 2, "");
  }
  set vk(value) {
    pb_1.Message.setField(this, 2, value);
  }
  get input_commitments() {
    return pb_1.Message.getFieldWithDefault(this, 3, []);
  }
  set input_commitments(value) {
    pb_1.Message.setField(this, 3, value);
  }
  /** @deprecated*/
  get toggles_commitment() {
    return pb_1.Message.getFieldWithDefault(this, 4, "");
  }
  /** @deprecated*/
  set toggles_commitment(value) {
    pb_1.Message.setField(this, 4, value);
  }
  get toggles() {
    return pb_1.Message.getFieldWithDefault(this, 5, []);
  }
  set toggles(value) {
    pb_1.Message.setField(this, 5, value);
  }
  get use_callback() {
    return pb_1.Message.getFieldWithDefault(this, 6, false);
  }
  set use_callback(value) {
    pb_1.Message.setField(this, 6, value);
  }
  get output() {
    return pb_1.Message.getFieldWithDefault(this, 7, "");
  }
  set output(value) {
    pb_1.Message.setField(this, 7, value);
  }
  get vk_hash() {
    return pb_1.Message.getFieldWithDefault(this, 8, "");
  }
  set vk_hash(value) {
    pb_1.Message.setField(this, 8, value);
  }
  get input_commitments_root() {
    return pb_1.Message.getFieldWithDefault(this, 9, "");
  }
  set input_commitments_root(value) {
    pb_1.Message.setField(this, 9, value);
  }
  get witness() {
    return pb_1.Message.getFieldWithDefault(this, 10, "");
  }
  set witness(value) {
    pb_1.Message.setField(this, 10, value);
  }
  get max_receipts() {
    return pb_1.Message.getFieldWithDefault(this, 11, 0);
  }
  set max_receipts(value) {
    pb_1.Message.setField(this, 11, value);
  }
  get max_storage() {
    return pb_1.Message.getFieldWithDefault(this, 12, 0);
  }
  set max_storage(value) {
    pb_1.Message.setField(this, 12, value);
  }
  get max_tx() {
    return pb_1.Message.getFieldWithDefault(this, 13, 0);
  }
  set max_tx(value) {
    pb_1.Message.setField(this, 13, value);
  }
  get max_num_data_points() {
    return pb_1.Message.getFieldWithDefault(this, 14, 0);
  }
  set max_num_data_points(value) {
    pb_1.Message.setField(this, 14, value);
  }
  static fromObject(data) {
    const message = new _AppCircuitInfo({});
    if (data.output_commitment != null) {
      message.output_commitment = data.output_commitment;
    }
    if (data.vk != null) {
      message.vk = data.vk;
    }
    if (data.input_commitments != null) {
      message.input_commitments = data.input_commitments;
    }
    if (data.toggles_commitment != null) {
      message.toggles_commitment = data.toggles_commitment;
    }
    if (data.toggles != null) {
      message.toggles = data.toggles;
    }
    if (data.use_callback != null) {
      message.use_callback = data.use_callback;
    }
    if (data.output != null) {
      message.output = data.output;
    }
    if (data.vk_hash != null) {
      message.vk_hash = data.vk_hash;
    }
    if (data.input_commitments_root != null) {
      message.input_commitments_root = data.input_commitments_root;
    }
    if (data.witness != null) {
      message.witness = data.witness;
    }
    if (data.max_receipts != null) {
      message.max_receipts = data.max_receipts;
    }
    if (data.max_storage != null) {
      message.max_storage = data.max_storage;
    }
    if (data.max_tx != null) {
      message.max_tx = data.max_tx;
    }
    if (data.max_num_data_points != null) {
      message.max_num_data_points = data.max_num_data_points;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.output_commitment != null) {
      data.output_commitment = this.output_commitment;
    }
    if (this.vk != null) {
      data.vk = this.vk;
    }
    if (this.input_commitments != null) {
      data.input_commitments = this.input_commitments;
    }
    if (this.toggles_commitment != null) {
      data.toggles_commitment = this.toggles_commitment;
    }
    if (this.toggles != null) {
      data.toggles = this.toggles;
    }
    if (this.use_callback != null) {
      data.use_callback = this.use_callback;
    }
    if (this.output != null) {
      data.output = this.output;
    }
    if (this.vk_hash != null) {
      data.vk_hash = this.vk_hash;
    }
    if (this.input_commitments_root != null) {
      data.input_commitments_root = this.input_commitments_root;
    }
    if (this.witness != null) {
      data.witness = this.witness;
    }
    if (this.max_receipts != null) {
      data.max_receipts = this.max_receipts;
    }
    if (this.max_storage != null) {
      data.max_storage = this.max_storage;
    }
    if (this.max_tx != null) {
      data.max_tx = this.max_tx;
    }
    if (this.max_num_data_points != null) {
      data.max_num_data_points = this.max_num_data_points;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_1.BinaryWriter();
    if (this.output_commitment.length)
      writer.writeString(1, this.output_commitment);
    if (this.vk.length)
      writer.writeString(2, this.vk);
    if (this.input_commitments.length)
      writer.writeRepeatedString(3, this.input_commitments);
    if (this.toggles_commitment.length)
      writer.writeString(4, this.toggles_commitment);
    if (this.toggles.length)
      writer.writePackedBool(5, this.toggles);
    if (this.use_callback != false)
      writer.writeBool(6, this.use_callback);
    if (this.output.length)
      writer.writeString(7, this.output);
    if (this.vk_hash.length)
      writer.writeString(8, this.vk_hash);
    if (this.input_commitments_root.length)
      writer.writeString(9, this.input_commitments_root);
    if (this.witness.length)
      writer.writeString(10, this.witness);
    if (this.max_receipts != 0)
      writer.writeUint32(11, this.max_receipts);
    if (this.max_storage != 0)
      writer.writeUint32(12, this.max_storage);
    if (this.max_tx != 0)
      writer.writeUint32(13, this.max_tx);
    if (this.max_num_data_points != 0)
      writer.writeUint32(14, this.max_num_data_points);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _AppCircuitInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.output_commitment = reader.readString();
          break;
        case 2:
          message.vk = reader.readString();
          break;
        case 3:
          pb_1.Message.addToRepeatedField(message, 3, reader.readString());
          break;
        case 4:
          message.toggles_commitment = reader.readString();
          break;
        case 5:
          message.toggles = reader.readPackedBool();
          break;
        case 6:
          message.use_callback = reader.readBool();
          break;
        case 7:
          message.output = reader.readString();
          break;
        case 8:
          message.vk_hash = reader.readString();
          break;
        case 9:
          message.input_commitments_root = reader.readString();
          break;
        case 10:
          message.witness = reader.readString();
          break;
        case 11:
          message.max_receipts = reader.readUint32();
          break;
        case 12:
          message.max_storage = reader.readUint32();
          break;
        case 13:
          message.max_tx = reader.readUint32();
          break;
        case 14:
          message.max_num_data_points = reader.readUint32();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _AppCircuitInfo.deserialize(bytes);
  }
};
_one_of_decls = new WeakMap();
var AppCircuitInfo = _AppCircuitInfo;
var _one_of_decls2;
var _AppCircuitInfoWithProof = class _AppCircuitInfoWithProof extends pb_1.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls2, []);
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], __privateGet(this, _one_of_decls2));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("output_commitment" in data && data.output_commitment != void 0) {
        this.output_commitment = data.output_commitment;
      }
      if ("vk_hash" in data && data.vk_hash != void 0) {
        this.vk_hash = data.vk_hash;
      }
      if ("input_commitments" in data && data.input_commitments != void 0) {
        this.input_commitments = data.input_commitments;
      }
      if ("toggles_commitment" in data && data.toggles_commitment != void 0) {
        this.toggles_commitment = data.toggles_commitment;
      }
      if ("toggles" in data && data.toggles != void 0) {
        this.toggles = data.toggles;
      }
      if ("output" in data && data.output != void 0) {
        this.output = data.output;
      }
      if ("proof" in data && data.proof != void 0) {
        this.proof = data.proof;
      }
      if ("callback_addr" in data && data.callback_addr != void 0) {
        this.callback_addr = data.callback_addr;
      }
      if ("input_commitments_root" in data && data.input_commitments_root != void 0) {
        this.input_commitments_root = data.input_commitments_root;
      }
      if ("witness" in data && data.witness != void 0) {
        this.witness = data.witness;
      }
      if ("max_receipts" in data && data.max_receipts != void 0) {
        this.max_receipts = data.max_receipts;
      }
      if ("max_storage" in data && data.max_storage != void 0) {
        this.max_storage = data.max_storage;
      }
      if ("max_tx" in data && data.max_tx != void 0) {
        this.max_tx = data.max_tx;
      }
      if ("max_num_data_points" in data && data.max_num_data_points != void 0) {
        this.max_num_data_points = data.max_num_data_points;
      }
    }
  }
  get output_commitment() {
    return pb_1.Message.getFieldWithDefault(this, 1, "");
  }
  set output_commitment(value) {
    pb_1.Message.setField(this, 1, value);
  }
  get vk_hash() {
    return pb_1.Message.getFieldWithDefault(this, 2, "");
  }
  set vk_hash(value) {
    pb_1.Message.setField(this, 2, value);
  }
  get input_commitments() {
    return pb_1.Message.getFieldWithDefault(this, 3, []);
  }
  set input_commitments(value) {
    pb_1.Message.setField(this, 3, value);
  }
  /** @deprecated*/
  get toggles_commitment() {
    return pb_1.Message.getFieldWithDefault(this, 4, "");
  }
  /** @deprecated*/
  set toggles_commitment(value) {
    pb_1.Message.setField(this, 4, value);
  }
  get toggles() {
    return pb_1.Message.getFieldWithDefault(this, 5, []);
  }
  set toggles(value) {
    pb_1.Message.setField(this, 5, value);
  }
  get output() {
    return pb_1.Message.getFieldWithDefault(this, 6, "");
  }
  set output(value) {
    pb_1.Message.setField(this, 6, value);
  }
  get proof() {
    return pb_1.Message.getFieldWithDefault(this, 7, "");
  }
  set proof(value) {
    pb_1.Message.setField(this, 7, value);
  }
  get callback_addr() {
    return pb_1.Message.getFieldWithDefault(this, 8, "");
  }
  set callback_addr(value) {
    pb_1.Message.setField(this, 8, value);
  }
  get input_commitments_root() {
    return pb_1.Message.getFieldWithDefault(this, 9, "");
  }
  set input_commitments_root(value) {
    pb_1.Message.setField(this, 9, value);
  }
  get witness() {
    return pb_1.Message.getFieldWithDefault(this, 10, "");
  }
  set witness(value) {
    pb_1.Message.setField(this, 10, value);
  }
  get max_receipts() {
    return pb_1.Message.getFieldWithDefault(this, 11, 0);
  }
  set max_receipts(value) {
    pb_1.Message.setField(this, 11, value);
  }
  get max_storage() {
    return pb_1.Message.getFieldWithDefault(this, 12, 0);
  }
  set max_storage(value) {
    pb_1.Message.setField(this, 12, value);
  }
  get max_tx() {
    return pb_1.Message.getFieldWithDefault(this, 13, 0);
  }
  set max_tx(value) {
    pb_1.Message.setField(this, 13, value);
  }
  get max_num_data_points() {
    return pb_1.Message.getFieldWithDefault(this, 14, 0);
  }
  set max_num_data_points(value) {
    pb_1.Message.setField(this, 14, value);
  }
  static fromObject(data) {
    const message = new _AppCircuitInfoWithProof({});
    if (data.output_commitment != null) {
      message.output_commitment = data.output_commitment;
    }
    if (data.vk_hash != null) {
      message.vk_hash = data.vk_hash;
    }
    if (data.input_commitments != null) {
      message.input_commitments = data.input_commitments;
    }
    if (data.toggles_commitment != null) {
      message.toggles_commitment = data.toggles_commitment;
    }
    if (data.toggles != null) {
      message.toggles = data.toggles;
    }
    if (data.output != null) {
      message.output = data.output;
    }
    if (data.proof != null) {
      message.proof = data.proof;
    }
    if (data.callback_addr != null) {
      message.callback_addr = data.callback_addr;
    }
    if (data.input_commitments_root != null) {
      message.input_commitments_root = data.input_commitments_root;
    }
    if (data.witness != null) {
      message.witness = data.witness;
    }
    if (data.max_receipts != null) {
      message.max_receipts = data.max_receipts;
    }
    if (data.max_storage != null) {
      message.max_storage = data.max_storage;
    }
    if (data.max_tx != null) {
      message.max_tx = data.max_tx;
    }
    if (data.max_num_data_points != null) {
      message.max_num_data_points = data.max_num_data_points;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.output_commitment != null) {
      data.output_commitment = this.output_commitment;
    }
    if (this.vk_hash != null) {
      data.vk_hash = this.vk_hash;
    }
    if (this.input_commitments != null) {
      data.input_commitments = this.input_commitments;
    }
    if (this.toggles_commitment != null) {
      data.toggles_commitment = this.toggles_commitment;
    }
    if (this.toggles != null) {
      data.toggles = this.toggles;
    }
    if (this.output != null) {
      data.output = this.output;
    }
    if (this.proof != null) {
      data.proof = this.proof;
    }
    if (this.callback_addr != null) {
      data.callback_addr = this.callback_addr;
    }
    if (this.input_commitments_root != null) {
      data.input_commitments_root = this.input_commitments_root;
    }
    if (this.witness != null) {
      data.witness = this.witness;
    }
    if (this.max_receipts != null) {
      data.max_receipts = this.max_receipts;
    }
    if (this.max_storage != null) {
      data.max_storage = this.max_storage;
    }
    if (this.max_tx != null) {
      data.max_tx = this.max_tx;
    }
    if (this.max_num_data_points != null) {
      data.max_num_data_points = this.max_num_data_points;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_1.BinaryWriter();
    if (this.output_commitment.length)
      writer.writeString(1, this.output_commitment);
    if (this.vk_hash.length)
      writer.writeString(2, this.vk_hash);
    if (this.input_commitments.length)
      writer.writeRepeatedString(3, this.input_commitments);
    if (this.toggles_commitment.length)
      writer.writeString(4, this.toggles_commitment);
    if (this.toggles.length)
      writer.writePackedBool(5, this.toggles);
    if (this.output.length)
      writer.writeString(6, this.output);
    if (this.proof.length)
      writer.writeString(7, this.proof);
    if (this.callback_addr.length)
      writer.writeString(8, this.callback_addr);
    if (this.input_commitments_root.length)
      writer.writeString(9, this.input_commitments_root);
    if (this.witness.length)
      writer.writeString(10, this.witness);
    if (this.max_receipts != 0)
      writer.writeUint32(11, this.max_receipts);
    if (this.max_storage != 0)
      writer.writeUint32(12, this.max_storage);
    if (this.max_tx != 0)
      writer.writeUint32(13, this.max_tx);
    if (this.max_num_data_points != 0)
      writer.writeUint32(14, this.max_num_data_points);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _AppCircuitInfoWithProof();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.output_commitment = reader.readString();
          break;
        case 2:
          message.vk_hash = reader.readString();
          break;
        case 3:
          pb_1.Message.addToRepeatedField(message, 3, reader.readString());
          break;
        case 4:
          message.toggles_commitment = reader.readString();
          break;
        case 5:
          message.toggles = reader.readPackedBool();
          break;
        case 6:
          message.output = reader.readString();
          break;
        case 7:
          message.proof = reader.readString();
          break;
        case 8:
          message.callback_addr = reader.readString();
          break;
        case 9:
          message.input_commitments_root = reader.readString();
          break;
        case 10:
          message.witness = reader.readString();
          break;
        case 11:
          message.max_receipts = reader.readUint32();
          break;
        case 12:
          message.max_storage = reader.readUint32();
          break;
        case 13:
          message.max_tx = reader.readUint32();
          break;
        case 14:
          message.max_num_data_points = reader.readUint32();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _AppCircuitInfoWithProof.deserialize(bytes);
  }
};
_one_of_decls2 = new WeakMap();
var AppCircuitInfoWithProof = _AppCircuitInfoWithProof;

// proto/sdk/types.ts
import * as pb_12 from "google-protobuf";
var _one_of_decls3;
var _ReceiptData = class _ReceiptData extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls3, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __privateGet(this, _one_of_decls3));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("block_num" in data && data.block_num != void 0) {
        this.block_num = data.block_num;
      }
      if ("tx_hash" in data && data.tx_hash != void 0) {
        this.tx_hash = data.tx_hash;
      }
      if ("fields" in data && data.fields != void 0) {
        this.fields = data.fields;
      }
    }
  }
  get block_num() {
    return pb_12.Message.getFieldWithDefault(this, 1, 0);
  }
  set block_num(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get tx_hash() {
    return pb_12.Message.getFieldWithDefault(this, 2, "");
  }
  set tx_hash(value) {
    pb_12.Message.setField(this, 2, value);
  }
  get fields() {
    return pb_12.Message.getRepeatedWrapperField(this, Field, 3);
  }
  set fields(value) {
    pb_12.Message.setRepeatedWrapperField(this, 3, value);
  }
  static fromObject(data) {
    const message = new _ReceiptData({});
    if (data.block_num != null) {
      message.block_num = data.block_num;
    }
    if (data.tx_hash != null) {
      message.tx_hash = data.tx_hash;
    }
    if (data.fields != null) {
      message.fields = data.fields.map((item) => Field.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.block_num != null) {
      data.block_num = this.block_num;
    }
    if (this.tx_hash != null) {
      data.tx_hash = this.tx_hash;
    }
    if (this.fields != null) {
      data.fields = this.fields.map((item) => item.toObject());
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.block_num != 0)
      writer.writeUint64(1, this.block_num);
    if (this.tx_hash.length)
      writer.writeString(2, this.tx_hash);
    if (this.fields.length)
      writer.writeRepeatedMessage(3, this.fields, (item) => item.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _ReceiptData();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.block_num = reader.readUint64();
          break;
        case 2:
          message.tx_hash = reader.readString();
          break;
        case 3:
          reader.readMessage(message.fields, () => pb_12.Message.addToRepeatedWrapperField(message, 3, Field.deserialize(reader), Field));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ReceiptData.deserialize(bytes);
  }
};
_one_of_decls3 = new WeakMap();
var ReceiptData = _ReceiptData;
var _one_of_decls4;
var _Field = class _Field extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls4, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls4));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("contract" in data && data.contract != void 0) {
        this.contract = data.contract;
      }
      if ("log_pos" in data && data.log_pos != void 0) {
        this.log_pos = data.log_pos;
      }
      if ("event_id" in data && data.event_id != void 0) {
        this.event_id = data.event_id;
      }
      if ("value" in data && data.value != void 0) {
        this.value = data.value;
      }
      if ("is_topic" in data && data.is_topic != void 0) {
        this.is_topic = data.is_topic;
      }
      if ("field_index" in data && data.field_index != void 0) {
        this.field_index = data.field_index;
      }
    }
  }
  get contract() {
    return pb_12.Message.getFieldWithDefault(this, 1, "");
  }
  set contract(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get log_pos() {
    return pb_12.Message.getFieldWithDefault(this, 2, 0);
  }
  set log_pos(value) {
    pb_12.Message.setField(this, 2, value);
  }
  get event_id() {
    return pb_12.Message.getFieldWithDefault(this, 3, "");
  }
  set event_id(value) {
    pb_12.Message.setField(this, 3, value);
  }
  get value() {
    return pb_12.Message.getFieldWithDefault(this, 4, "");
  }
  set value(value) {
    pb_12.Message.setField(this, 4, value);
  }
  get is_topic() {
    return pb_12.Message.getFieldWithDefault(this, 5, false);
  }
  set is_topic(value) {
    pb_12.Message.setField(this, 5, value);
  }
  get field_index() {
    return pb_12.Message.getFieldWithDefault(this, 6, 0);
  }
  set field_index(value) {
    pb_12.Message.setField(this, 6, value);
  }
  static fromObject(data) {
    const message = new _Field({});
    if (data.contract != null) {
      message.contract = data.contract;
    }
    if (data.log_pos != null) {
      message.log_pos = data.log_pos;
    }
    if (data.event_id != null) {
      message.event_id = data.event_id;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    if (data.is_topic != null) {
      message.is_topic = data.is_topic;
    }
    if (data.field_index != null) {
      message.field_index = data.field_index;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.contract != null) {
      data.contract = this.contract;
    }
    if (this.log_pos != null) {
      data.log_pos = this.log_pos;
    }
    if (this.event_id != null) {
      data.event_id = this.event_id;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    if (this.is_topic != null) {
      data.is_topic = this.is_topic;
    }
    if (this.field_index != null) {
      data.field_index = this.field_index;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.contract.length)
      writer.writeString(1, this.contract);
    if (this.log_pos != 0)
      writer.writeUint32(2, this.log_pos);
    if (this.event_id.length)
      writer.writeString(3, this.event_id);
    if (this.value.length)
      writer.writeString(4, this.value);
    if (this.is_topic != false)
      writer.writeBool(5, this.is_topic);
    if (this.field_index != 0)
      writer.writeUint32(6, this.field_index);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _Field();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.contract = reader.readString();
          break;
        case 2:
          message.log_pos = reader.readUint32();
          break;
        case 3:
          message.event_id = reader.readString();
          break;
        case 4:
          message.value = reader.readString();
          break;
        case 5:
          message.is_topic = reader.readBool();
          break;
        case 6:
          message.field_index = reader.readUint32();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _Field.deserialize(bytes);
  }
};
_one_of_decls4 = new WeakMap();
var Field = _Field;
var _one_of_decls5;
var _StorageData = class _StorageData extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls5, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls5));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("block_num" in data && data.block_num != void 0) {
        this.block_num = data.block_num;
      }
      if ("address" in data && data.address != void 0) {
        this.address = data.address;
      }
      if ("slot" in data && data.slot != void 0) {
        this.slot = data.slot;
      }
      if ("value" in data && data.value != void 0) {
        this.value = data.value;
      }
    }
  }
  get block_num() {
    return pb_12.Message.getFieldWithDefault(this, 1, 0);
  }
  set block_num(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get address() {
    return pb_12.Message.getFieldWithDefault(this, 2, "");
  }
  set address(value) {
    pb_12.Message.setField(this, 2, value);
  }
  get slot() {
    return pb_12.Message.getFieldWithDefault(this, 3, "");
  }
  set slot(value) {
    pb_12.Message.setField(this, 3, value);
  }
  get value() {
    return pb_12.Message.getFieldWithDefault(this, 4, "");
  }
  set value(value) {
    pb_12.Message.setField(this, 4, value);
  }
  static fromObject(data) {
    const message = new _StorageData({});
    if (data.block_num != null) {
      message.block_num = data.block_num;
    }
    if (data.address != null) {
      message.address = data.address;
    }
    if (data.slot != null) {
      message.slot = data.slot;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.block_num != null) {
      data.block_num = this.block_num;
    }
    if (this.address != null) {
      data.address = this.address;
    }
    if (this.slot != null) {
      data.slot = this.slot;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.block_num != 0)
      writer.writeUint64(1, this.block_num);
    if (this.address.length)
      writer.writeString(2, this.address);
    if (this.slot.length)
      writer.writeString(3, this.slot);
    if (this.value.length)
      writer.writeString(4, this.value);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _StorageData();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.block_num = reader.readUint64();
          break;
        case 2:
          message.address = reader.readString();
          break;
        case 3:
          message.slot = reader.readString();
          break;
        case 4:
          message.value = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _StorageData.deserialize(bytes);
  }
};
_one_of_decls5 = new WeakMap();
var StorageData = _StorageData;
var _one_of_decls6;
var _TransactionData = class _TransactionData extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls6, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls6));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("hash" in data && data.hash != void 0) {
        this.hash = data.hash;
      }
      if ("chain_id" in data && data.chain_id != void 0) {
        this.chain_id = data.chain_id;
      }
      if ("block_num" in data && data.block_num != void 0) {
        this.block_num = data.block_num;
      }
      if ("nonce" in data && data.nonce != void 0) {
        this.nonce = data.nonce;
      }
      if ("gas_tip_cap_or_gas_price" in data && data.gas_tip_cap_or_gas_price != void 0) {
        this.gas_tip_cap_or_gas_price = data.gas_tip_cap_or_gas_price;
      }
      if ("gas_fee_cap" in data && data.gas_fee_cap != void 0) {
        this.gas_fee_cap = data.gas_fee_cap;
      }
      if ("gas_limit" in data && data.gas_limit != void 0) {
        this.gas_limit = data.gas_limit;
      }
      if ("from" in data && data.from != void 0) {
        this.from = data.from;
      }
      if ("to" in data && data.to != void 0) {
        this.to = data.to;
      }
      if ("value" in data && data.value != void 0) {
        this.value = data.value;
      }
    }
  }
  get hash() {
    return pb_12.Message.getFieldWithDefault(this, 1, "");
  }
  set hash(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get chain_id() {
    return pb_12.Message.getFieldWithDefault(this, 2, 0);
  }
  set chain_id(value) {
    pb_12.Message.setField(this, 2, value);
  }
  get block_num() {
    return pb_12.Message.getFieldWithDefault(this, 3, 0);
  }
  set block_num(value) {
    pb_12.Message.setField(this, 3, value);
  }
  get nonce() {
    return pb_12.Message.getFieldWithDefault(this, 4, 0);
  }
  set nonce(value) {
    pb_12.Message.setField(this, 4, value);
  }
  get gas_tip_cap_or_gas_price() {
    return pb_12.Message.getFieldWithDefault(this, 5, "");
  }
  set gas_tip_cap_or_gas_price(value) {
    pb_12.Message.setField(this, 5, value);
  }
  get gas_fee_cap() {
    return pb_12.Message.getFieldWithDefault(this, 6, "");
  }
  set gas_fee_cap(value) {
    pb_12.Message.setField(this, 6, value);
  }
  get gas_limit() {
    return pb_12.Message.getFieldWithDefault(this, 7, 0);
  }
  set gas_limit(value) {
    pb_12.Message.setField(this, 7, value);
  }
  get from() {
    return pb_12.Message.getFieldWithDefault(this, 8, "");
  }
  set from(value) {
    pb_12.Message.setField(this, 8, value);
  }
  get to() {
    return pb_12.Message.getFieldWithDefault(this, 9, "");
  }
  set to(value) {
    pb_12.Message.setField(this, 9, value);
  }
  get value() {
    return pb_12.Message.getFieldWithDefault(this, 10, "");
  }
  set value(value) {
    pb_12.Message.setField(this, 10, value);
  }
  static fromObject(data) {
    const message = new _TransactionData({});
    if (data.hash != null) {
      message.hash = data.hash;
    }
    if (data.chain_id != null) {
      message.chain_id = data.chain_id;
    }
    if (data.block_num != null) {
      message.block_num = data.block_num;
    }
    if (data.nonce != null) {
      message.nonce = data.nonce;
    }
    if (data.gas_tip_cap_or_gas_price != null) {
      message.gas_tip_cap_or_gas_price = data.gas_tip_cap_or_gas_price;
    }
    if (data.gas_fee_cap != null) {
      message.gas_fee_cap = data.gas_fee_cap;
    }
    if (data.gas_limit != null) {
      message.gas_limit = data.gas_limit;
    }
    if (data.from != null) {
      message.from = data.from;
    }
    if (data.to != null) {
      message.to = data.to;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.hash != null) {
      data.hash = this.hash;
    }
    if (this.chain_id != null) {
      data.chain_id = this.chain_id;
    }
    if (this.block_num != null) {
      data.block_num = this.block_num;
    }
    if (this.nonce != null) {
      data.nonce = this.nonce;
    }
    if (this.gas_tip_cap_or_gas_price != null) {
      data.gas_tip_cap_or_gas_price = this.gas_tip_cap_or_gas_price;
    }
    if (this.gas_fee_cap != null) {
      data.gas_fee_cap = this.gas_fee_cap;
    }
    if (this.gas_limit != null) {
      data.gas_limit = this.gas_limit;
    }
    if (this.from != null) {
      data.from = this.from;
    }
    if (this.to != null) {
      data.to = this.to;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.hash.length)
      writer.writeString(1, this.hash);
    if (this.chain_id != 0)
      writer.writeUint64(2, this.chain_id);
    if (this.block_num != 0)
      writer.writeUint64(3, this.block_num);
    if (this.nonce != 0)
      writer.writeUint64(4, this.nonce);
    if (this.gas_tip_cap_or_gas_price.length)
      writer.writeString(5, this.gas_tip_cap_or_gas_price);
    if (this.gas_fee_cap.length)
      writer.writeString(6, this.gas_fee_cap);
    if (this.gas_limit != 0)
      writer.writeUint64(7, this.gas_limit);
    if (this.from.length)
      writer.writeString(8, this.from);
    if (this.to.length)
      writer.writeString(9, this.to);
    if (this.value.length)
      writer.writeString(10, this.value);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _TransactionData();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.hash = reader.readString();
          break;
        case 2:
          message.chain_id = reader.readUint64();
          break;
        case 3:
          message.block_num = reader.readUint64();
          break;
        case 4:
          message.nonce = reader.readUint64();
          break;
        case 5:
          message.gas_tip_cap_or_gas_price = reader.readString();
          break;
        case 6:
          message.gas_fee_cap = reader.readString();
          break;
        case 7:
          message.gas_limit = reader.readUint64();
          break;
        case 8:
          message.from = reader.readString();
          break;
        case 9:
          message.to = reader.readString();
          break;
        case 10:
          message.value = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _TransactionData.deserialize(bytes);
  }
};
_one_of_decls6 = new WeakMap();
var TransactionData = _TransactionData;
var _one_of_decls7;
var _CustomInput = class _CustomInput extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls7, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls7));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("json_bytes" in data && data.json_bytes != void 0) {
        this.json_bytes = data.json_bytes;
      }
    }
  }
  get json_bytes() {
    return pb_12.Message.getFieldWithDefault(this, 1, "");
  }
  set json_bytes(value) {
    pb_12.Message.setField(this, 1, value);
  }
  static fromObject(data) {
    const message = new _CustomInput({});
    if (data.json_bytes != null) {
      message.json_bytes = data.json_bytes;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.json_bytes != null) {
      data.json_bytes = this.json_bytes;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.json_bytes.length)
      writer.writeString(1, this.json_bytes);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _CustomInput();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.json_bytes = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _CustomInput.deserialize(bytes);
  }
};
_one_of_decls7 = new WeakMap();
var CustomInput = _CustomInput;
var _one_of_decls8;
var _IndexedReceipt = class _IndexedReceipt extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls8, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls8));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("index" in data && data.index != void 0) {
        this.index = data.index;
      }
      if ("data" in data && data.data != void 0) {
        this.data = data.data;
      }
    }
  }
  get index() {
    return pb_12.Message.getFieldWithDefault(this, 1, 0);
  }
  set index(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get data() {
    return pb_12.Message.getWrapperField(this, ReceiptData, 2);
  }
  set data(value) {
    pb_12.Message.setWrapperField(this, 2, value);
  }
  get has_data() {
    return pb_12.Message.getField(this, 2) != null;
  }
  static fromObject(data) {
    const message = new _IndexedReceipt({});
    if (data.index != null) {
      message.index = data.index;
    }
    if (data.data != null) {
      message.data = ReceiptData.fromObject(data.data);
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.index != null) {
      data.index = this.index;
    }
    if (this.data != null) {
      data.data = this.data.toObject();
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.index != 0)
      writer.writeUint32(1, this.index);
    if (this.has_data)
      writer.writeMessage(2, this.data, () => this.data.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _IndexedReceipt();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.index = reader.readUint32();
          break;
        case 2:
          reader.readMessage(message.data, () => message.data = ReceiptData.deserialize(reader));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _IndexedReceipt.deserialize(bytes);
  }
};
_one_of_decls8 = new WeakMap();
var IndexedReceipt = _IndexedReceipt;
var _one_of_decls9;
var _IndexedStorage = class _IndexedStorage extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls9, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls9));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("index" in data && data.index != void 0) {
        this.index = data.index;
      }
      if ("data" in data && data.data != void 0) {
        this.data = data.data;
      }
    }
  }
  get index() {
    return pb_12.Message.getFieldWithDefault(this, 1, 0);
  }
  set index(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get data() {
    return pb_12.Message.getWrapperField(this, StorageData, 2);
  }
  set data(value) {
    pb_12.Message.setWrapperField(this, 2, value);
  }
  get has_data() {
    return pb_12.Message.getField(this, 2) != null;
  }
  static fromObject(data) {
    const message = new _IndexedStorage({});
    if (data.index != null) {
      message.index = data.index;
    }
    if (data.data != null) {
      message.data = StorageData.fromObject(data.data);
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.index != null) {
      data.index = this.index;
    }
    if (this.data != null) {
      data.data = this.data.toObject();
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.index != 0)
      writer.writeUint32(1, this.index);
    if (this.has_data)
      writer.writeMessage(2, this.data, () => this.data.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _IndexedStorage();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.index = reader.readUint32();
          break;
        case 2:
          reader.readMessage(message.data, () => message.data = StorageData.deserialize(reader));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _IndexedStorage.deserialize(bytes);
  }
};
_one_of_decls9 = new WeakMap();
var IndexedStorage = _IndexedStorage;
var _one_of_decls10;
var _IndexedTransaction = class _IndexedTransaction extends pb_12.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls10, []);
    pb_12.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls10));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("index" in data && data.index != void 0) {
        this.index = data.index;
      }
      if ("data" in data && data.data != void 0) {
        this.data = data.data;
      }
    }
  }
  get index() {
    return pb_12.Message.getFieldWithDefault(this, 1, 0);
  }
  set index(value) {
    pb_12.Message.setField(this, 1, value);
  }
  get data() {
    return pb_12.Message.getWrapperField(this, TransactionData, 2);
  }
  set data(value) {
    pb_12.Message.setWrapperField(this, 2, value);
  }
  get has_data() {
    return pb_12.Message.getField(this, 2) != null;
  }
  static fromObject(data) {
    const message = new _IndexedTransaction({});
    if (data.index != null) {
      message.index = data.index;
    }
    if (data.data != null) {
      message.data = TransactionData.fromObject(data.data);
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.index != null) {
      data.index = this.index;
    }
    if (this.data != null) {
      data.data = this.data.toObject();
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_12.BinaryWriter();
    if (this.index != 0)
      writer.writeUint32(1, this.index);
    if (this.has_data)
      writer.writeMessage(2, this.data, () => this.data.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_12.BinaryReader ? bytes : new pb_12.BinaryReader(bytes), message = new _IndexedTransaction();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.index = reader.readUint32();
          break;
        case 2:
          reader.readMessage(message.data, () => message.data = TransactionData.deserialize(reader));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _IndexedTransaction.deserialize(bytes);
  }
};
_one_of_decls10 = new WeakMap();
var IndexedTransaction = _IndexedTransaction;

// proto/sdk/prover.ts
import * as pb_13 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
var ErrCode = /* @__PURE__ */ ((ErrCode2) => {
  ErrCode2[ErrCode2["ERROR_UNDEFINED"] = 0] = "ERROR_UNDEFINED";
  ErrCode2[ErrCode2["ERROR_DEFAULT"] = 1] = "ERROR_DEFAULT";
  ErrCode2[ErrCode2["ERROR_INVALID_INPUT"] = 2] = "ERROR_INVALID_INPUT";
  ErrCode2[ErrCode2["ERROR_INVALID_CUSTOM_INPUT"] = 3] = "ERROR_INVALID_CUSTOM_INPUT";
  ErrCode2[ErrCode2["ERROR_FAILED_TO_PROVE"] = 4] = "ERROR_FAILED_TO_PROVE";
  return ErrCode2;
})(ErrCode || {});
var _one_of_decls11;
var _ProveRequest = class _ProveRequest extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls11, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], __privateGet(this, _one_of_decls11));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("receipts" in data && data.receipts != void 0) {
        this.receipts = data.receipts;
      }
      if ("storages" in data && data.storages != void 0) {
        this.storages = data.storages;
      }
      if ("transactions" in data && data.transactions != void 0) {
        this.transactions = data.transactions;
      }
      if ("custom_input" in data && data.custom_input != void 0) {
        this.custom_input = data.custom_input;
      }
      if ("src_chain_id" in data && data.src_chain_id != void 0) {
        this.src_chain_id = data.src_chain_id;
      }
    }
  }
  get receipts() {
    return pb_13.Message.getRepeatedWrapperField(this, IndexedReceipt, 1);
  }
  set receipts(value) {
    pb_13.Message.setRepeatedWrapperField(this, 1, value);
  }
  get storages() {
    return pb_13.Message.getRepeatedWrapperField(this, IndexedStorage, 2);
  }
  set storages(value) {
    pb_13.Message.setRepeatedWrapperField(this, 2, value);
  }
  get transactions() {
    return pb_13.Message.getRepeatedWrapperField(this, IndexedTransaction, 3);
  }
  set transactions(value) {
    pb_13.Message.setRepeatedWrapperField(this, 3, value);
  }
  get custom_input() {
    return pb_13.Message.getWrapperField(this, CustomInput, 4);
  }
  set custom_input(value) {
    pb_13.Message.setWrapperField(this, 4, value);
  }
  get has_custom_input() {
    return pb_13.Message.getField(this, 4) != null;
  }
  get src_chain_id() {
    return pb_13.Message.getFieldWithDefault(this, 5, 0);
  }
  set src_chain_id(value) {
    pb_13.Message.setField(this, 5, value);
  }
  static fromObject(data) {
    const message = new _ProveRequest({});
    if (data.receipts != null) {
      message.receipts = data.receipts.map((item) => IndexedReceipt.fromObject(item));
    }
    if (data.storages != null) {
      message.storages = data.storages.map((item) => IndexedStorage.fromObject(item));
    }
    if (data.transactions != null) {
      message.transactions = data.transactions.map((item) => IndexedTransaction.fromObject(item));
    }
    if (data.custom_input != null) {
      message.custom_input = CustomInput.fromObject(data.custom_input);
    }
    if (data.src_chain_id != null) {
      message.src_chain_id = data.src_chain_id;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.receipts != null) {
      data.receipts = this.receipts.map((item) => item.toObject());
    }
    if (this.storages != null) {
      data.storages = this.storages.map((item) => item.toObject());
    }
    if (this.transactions != null) {
      data.transactions = this.transactions.map((item) => item.toObject());
    }
    if (this.custom_input != null) {
      data.custom_input = this.custom_input.toObject();
    }
    if (this.src_chain_id != null) {
      data.src_chain_id = this.src_chain_id;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.receipts.length)
      writer.writeRepeatedMessage(1, this.receipts, (item) => item.serialize(writer));
    if (this.storages.length)
      writer.writeRepeatedMessage(2, this.storages, (item) => item.serialize(writer));
    if (this.transactions.length)
      writer.writeRepeatedMessage(3, this.transactions, (item) => item.serialize(writer));
    if (this.has_custom_input)
      writer.writeMessage(4, this.custom_input, () => this.custom_input.serialize(writer));
    if (this.src_chain_id != 0)
      writer.writeUint64(5, this.src_chain_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _ProveRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.receipts, () => pb_13.Message.addToRepeatedWrapperField(message, 1, IndexedReceipt.deserialize(reader), IndexedReceipt));
          break;
        case 2:
          reader.readMessage(message.storages, () => pb_13.Message.addToRepeatedWrapperField(message, 2, IndexedStorage.deserialize(reader), IndexedStorage));
          break;
        case 3:
          reader.readMessage(message.transactions, () => pb_13.Message.addToRepeatedWrapperField(message, 3, IndexedTransaction.deserialize(reader), IndexedTransaction));
          break;
        case 4:
          reader.readMessage(message.custom_input, () => message.custom_input = CustomInput.deserialize(reader));
          break;
        case 5:
          message.src_chain_id = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ProveRequest.deserialize(bytes);
  }
};
_one_of_decls11 = new WeakMap();
var ProveRequest = _ProveRequest;
var _one_of_decls12;
var _ProveResponse = class _ProveResponse extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls12, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls12));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("proof" in data && data.proof != void 0) {
        this.proof = data.proof;
      }
      if ("circuit_info" in data && data.circuit_info != void 0) {
        this.circuit_info = data.circuit_info;
      }
    }
  }
  get err() {
    return pb_13.Message.getWrapperField(this, Err, 1);
  }
  set err(value) {
    pb_13.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_13.Message.getField(this, 1) != null;
  }
  get proof() {
    return pb_13.Message.getFieldWithDefault(this, 2, "");
  }
  set proof(value) {
    pb_13.Message.setField(this, 2, value);
  }
  get circuit_info() {
    return pb_13.Message.getWrapperField(this, AppCircuitInfo, 3);
  }
  set circuit_info(value) {
    pb_13.Message.setWrapperField(this, 3, value);
  }
  get has_circuit_info() {
    return pb_13.Message.getField(this, 3) != null;
  }
  static fromObject(data) {
    const message = new _ProveResponse({});
    if (data.err != null) {
      message.err = Err.fromObject(data.err);
    }
    if (data.proof != null) {
      message.proof = data.proof;
    }
    if (data.circuit_info != null) {
      message.circuit_info = AppCircuitInfo.fromObject(data.circuit_info);
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.proof != null) {
      data.proof = this.proof;
    }
    if (this.circuit_info != null) {
      data.circuit_info = this.circuit_info.toObject();
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.proof.length)
      writer.writeString(2, this.proof);
    if (this.has_circuit_info)
      writer.writeMessage(3, this.circuit_info, () => this.circuit_info.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _ProveResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = Err.deserialize(reader));
          break;
        case 2:
          message.proof = reader.readString();
          break;
        case 3:
          reader.readMessage(message.circuit_info, () => message.circuit_info = AppCircuitInfo.deserialize(reader));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ProveResponse.deserialize(bytes);
  }
};
_one_of_decls12 = new WeakMap();
var ProveResponse = _ProveResponse;
var _one_of_decls13;
var _ProveAsyncResponse = class _ProveAsyncResponse extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls13, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls13));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("proof_id" in data && data.proof_id != void 0) {
        this.proof_id = data.proof_id;
      }
      if ("circuit_info" in data && data.circuit_info != void 0) {
        this.circuit_info = data.circuit_info;
      }
    }
  }
  get err() {
    return pb_13.Message.getWrapperField(this, Err, 1);
  }
  set err(value) {
    pb_13.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_13.Message.getField(this, 1) != null;
  }
  get proof_id() {
    return pb_13.Message.getFieldWithDefault(this, 2, "");
  }
  set proof_id(value) {
    pb_13.Message.setField(this, 2, value);
  }
  get circuit_info() {
    return pb_13.Message.getWrapperField(this, AppCircuitInfo, 3);
  }
  set circuit_info(value) {
    pb_13.Message.setWrapperField(this, 3, value);
  }
  get has_circuit_info() {
    return pb_13.Message.getField(this, 3) != null;
  }
  static fromObject(data) {
    const message = new _ProveAsyncResponse({});
    if (data.err != null) {
      message.err = Err.fromObject(data.err);
    }
    if (data.proof_id != null) {
      message.proof_id = data.proof_id;
    }
    if (data.circuit_info != null) {
      message.circuit_info = AppCircuitInfo.fromObject(data.circuit_info);
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.proof_id != null) {
      data.proof_id = this.proof_id;
    }
    if (this.circuit_info != null) {
      data.circuit_info = this.circuit_info.toObject();
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.proof_id.length)
      writer.writeString(2, this.proof_id);
    if (this.has_circuit_info)
      writer.writeMessage(3, this.circuit_info, () => this.circuit_info.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _ProveAsyncResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = Err.deserialize(reader));
          break;
        case 2:
          message.proof_id = reader.readString();
          break;
        case 3:
          reader.readMessage(message.circuit_info, () => message.circuit_info = AppCircuitInfo.deserialize(reader));
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ProveAsyncResponse.deserialize(bytes);
  }
};
_one_of_decls13 = new WeakMap();
var ProveAsyncResponse = _ProveAsyncResponse;
var _one_of_decls14;
var _GetProofRequest = class _GetProofRequest extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls14, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls14));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("proof_id" in data && data.proof_id != void 0) {
        this.proof_id = data.proof_id;
      }
    }
  }
  get proof_id() {
    return pb_13.Message.getFieldWithDefault(this, 1, "");
  }
  set proof_id(value) {
    pb_13.Message.setField(this, 1, value);
  }
  static fromObject(data) {
    const message = new _GetProofRequest({});
    if (data.proof_id != null) {
      message.proof_id = data.proof_id;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.proof_id != null) {
      data.proof_id = this.proof_id;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.proof_id.length)
      writer.writeString(1, this.proof_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _GetProofRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.proof_id = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetProofRequest.deserialize(bytes);
  }
};
_one_of_decls14 = new WeakMap();
var GetProofRequest = _GetProofRequest;
var _one_of_decls15;
var _GetProofResponse = class _GetProofResponse extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls15, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls15));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("proof" in data && data.proof != void 0) {
        this.proof = data.proof;
      }
    }
  }
  get err() {
    return pb_13.Message.getWrapperField(this, Err, 1);
  }
  set err(value) {
    pb_13.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_13.Message.getField(this, 1) != null;
  }
  get proof() {
    return pb_13.Message.getFieldWithDefault(this, 2, "");
  }
  set proof(value) {
    pb_13.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _GetProofResponse({});
    if (data.err != null) {
      message.err = Err.fromObject(data.err);
    }
    if (data.proof != null) {
      message.proof = data.proof;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.proof != null) {
      data.proof = this.proof;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.proof.length)
      writer.writeString(2, this.proof);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _GetProofResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = Err.deserialize(reader));
          break;
        case 2:
          message.proof = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetProofResponse.deserialize(bytes);
  }
};
_one_of_decls15 = new WeakMap();
var GetProofResponse = _GetProofResponse;
var _one_of_decls16;
var _Err = class _Err extends pb_13.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls16, []);
    pb_13.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls16));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("code" in data && data.code != void 0) {
        this.code = data.code;
      }
      if ("msg" in data && data.msg != void 0) {
        this.msg = data.msg;
      }
    }
  }
  get code() {
    return pb_13.Message.getFieldWithDefault(this, 1, 0 /* ERROR_UNDEFINED */);
  }
  set code(value) {
    pb_13.Message.setField(this, 1, value);
  }
  get msg() {
    return pb_13.Message.getFieldWithDefault(this, 2, "");
  }
  set msg(value) {
    pb_13.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _Err({});
    if (data.code != null) {
      message.code = data.code;
    }
    if (data.msg != null) {
      message.msg = data.msg;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.code != null) {
      data.code = this.code;
    }
    if (this.msg != null) {
      data.msg = this.msg;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_13.BinaryWriter();
    if (this.code != 0 /* ERROR_UNDEFINED */)
      writer.writeEnum(1, this.code);
    if (this.msg.length)
      writer.writeString(2, this.msg);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_13.BinaryReader ? bytes : new pb_13.BinaryReader(bytes), message = new _Err();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.code = reader.readEnum();
          break;
        case 2:
          message.msg = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _Err.deserialize(bytes);
  }
};
_one_of_decls16 = new WeakMap();
var Err = _Err;
var UnimplementedProverService = class {
};
UnimplementedProverService.definition = {
  Prove: {
    path: "/sdk.Prover/Prove",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => ProveRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => ProveResponse.deserialize(new Uint8Array(bytes))
  },
  ProveAsync: {
    path: "/sdk.Prover/ProveAsync",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => ProveRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => ProveAsyncResponse.deserialize(new Uint8Array(bytes))
  },
  GetProof: {
    path: "/sdk.Prover/GetProof",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => GetProofRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => GetProofResponse.deserialize(new Uint8Array(bytes))
  }
};
var ProverClient = class extends grpc_1.makeGenericClientConstructor(UnimplementedProverService.definition, "Prover", {}) {
  constructor(address, credentials3, options) {
    super(address, credentials3, options);
    this.Prove = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_1.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.Prove(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.ProveAsync = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_1.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.ProveAsync(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.GetProof = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_1.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.GetProof(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
  }
};

// src/brevis-client.ts
import { credentials } from "@grpc/grpc-js";

// proto/brevis/types.ts
import * as pb_14 from "google-protobuf";
var _one_of_decls17;
var _ReceiptInfo = class _ReceiptInfo extends pb_14.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls17, []);
    pb_14.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __privateGet(this, _one_of_decls17));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("transaction_hash" in data && data.transaction_hash != void 0) {
        this.transaction_hash = data.transaction_hash;
      }
      if ("log_extract_infos" in data && data.log_extract_infos != void 0) {
        this.log_extract_infos = data.log_extract_infos;
      }
      if ("blk_num" in data && data.blk_num != void 0) {
        this.blk_num = data.blk_num;
      }
      if ("receipt_index" in data && data.receipt_index != void 0) {
        this.receipt_index = data.receipt_index;
      }
    }
  }
  get transaction_hash() {
    return pb_14.Message.getFieldWithDefault(this, 1, "");
  }
  set transaction_hash(value) {
    pb_14.Message.setField(this, 1, value);
  }
  get log_extract_infos() {
    return pb_14.Message.getRepeatedWrapperField(this, LogExtractInfo, 2);
  }
  set log_extract_infos(value) {
    pb_14.Message.setRepeatedWrapperField(this, 2, value);
  }
  get blk_num() {
    return pb_14.Message.getFieldWithDefault(this, 3, 0);
  }
  set blk_num(value) {
    pb_14.Message.setField(this, 3, value);
  }
  get receipt_index() {
    return pb_14.Message.getFieldWithDefault(this, 4, 0);
  }
  set receipt_index(value) {
    pb_14.Message.setField(this, 4, value);
  }
  static fromObject(data) {
    const message = new _ReceiptInfo({});
    if (data.transaction_hash != null) {
      message.transaction_hash = data.transaction_hash;
    }
    if (data.log_extract_infos != null) {
      message.log_extract_infos = data.log_extract_infos.map((item) => LogExtractInfo.fromObject(item));
    }
    if (data.blk_num != null) {
      message.blk_num = data.blk_num;
    }
    if (data.receipt_index != null) {
      message.receipt_index = data.receipt_index;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.transaction_hash != null) {
      data.transaction_hash = this.transaction_hash;
    }
    if (this.log_extract_infos != null) {
      data.log_extract_infos = this.log_extract_infos.map((item) => item.toObject());
    }
    if (this.blk_num != null) {
      data.blk_num = this.blk_num;
    }
    if (this.receipt_index != null) {
      data.receipt_index = this.receipt_index;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_14.BinaryWriter();
    if (this.transaction_hash.length)
      writer.writeString(1, this.transaction_hash);
    if (this.log_extract_infos.length)
      writer.writeRepeatedMessage(2, this.log_extract_infos, (item) => item.serialize(writer));
    if (this.blk_num != 0)
      writer.writeUint64(3, this.blk_num);
    if (this.receipt_index != 0)
      writer.writeUint64(4, this.receipt_index);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_14.BinaryReader ? bytes : new pb_14.BinaryReader(bytes), message = new _ReceiptInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.transaction_hash = reader.readString();
          break;
        case 2:
          reader.readMessage(message.log_extract_infos, () => pb_14.Message.addToRepeatedWrapperField(message, 2, LogExtractInfo.deserialize(reader), LogExtractInfo));
          break;
        case 3:
          message.blk_num = reader.readUint64();
          break;
        case 4:
          message.receipt_index = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ReceiptInfo.deserialize(bytes);
  }
};
_one_of_decls17 = new WeakMap();
var ReceiptInfo = _ReceiptInfo;
var _one_of_decls18;
var _LogExtractInfo = class _LogExtractInfo extends pb_14.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls18, []);
    pb_14.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls18));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("contract_address" in data && data.contract_address != void 0) {
        this.contract_address = data.contract_address;
      }
      if ("log_pos" in data && data.log_pos != void 0) {
        this.log_pos = data.log_pos;
      }
      if ("log_topic0" in data && data.log_topic0 != void 0) {
        this.log_topic0 = data.log_topic0;
      }
      if ("value_from_topic" in data && data.value_from_topic != void 0) {
        this.value_from_topic = data.value_from_topic;
      }
      if ("value_index" in data && data.value_index != void 0) {
        this.value_index = data.value_index;
      }
      if ("value" in data && data.value != void 0) {
        this.value = data.value;
      }
      if ("topics_length" in data && data.topics_length != void 0) {
        this.topics_length = data.topics_length;
      }
    }
  }
  get contract_address() {
    return pb_14.Message.getFieldWithDefault(this, 1, "");
  }
  set contract_address(value) {
    pb_14.Message.setField(this, 1, value);
  }
  get log_pos() {
    return pb_14.Message.getFieldWithDefault(this, 2, 0);
  }
  set log_pos(value) {
    pb_14.Message.setField(this, 2, value);
  }
  get log_topic0() {
    return pb_14.Message.getFieldWithDefault(this, 3, "");
  }
  set log_topic0(value) {
    pb_14.Message.setField(this, 3, value);
  }
  get value_from_topic() {
    return pb_14.Message.getFieldWithDefault(this, 4, false);
  }
  set value_from_topic(value) {
    pb_14.Message.setField(this, 4, value);
  }
  get value_index() {
    return pb_14.Message.getFieldWithDefault(this, 5, 0);
  }
  set value_index(value) {
    pb_14.Message.setField(this, 5, value);
  }
  get value() {
    return pb_14.Message.getFieldWithDefault(this, 6, "");
  }
  set value(value) {
    pb_14.Message.setField(this, 6, value);
  }
  get topics_length() {
    return pb_14.Message.getFieldWithDefault(this, 7, 0);
  }
  set topics_length(value) {
    pb_14.Message.setField(this, 7, value);
  }
  static fromObject(data) {
    const message = new _LogExtractInfo({});
    if (data.contract_address != null) {
      message.contract_address = data.contract_address;
    }
    if (data.log_pos != null) {
      message.log_pos = data.log_pos;
    }
    if (data.log_topic0 != null) {
      message.log_topic0 = data.log_topic0;
    }
    if (data.value_from_topic != null) {
      message.value_from_topic = data.value_from_topic;
    }
    if (data.value_index != null) {
      message.value_index = data.value_index;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    if (data.topics_length != null) {
      message.topics_length = data.topics_length;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.contract_address != null) {
      data.contract_address = this.contract_address;
    }
    if (this.log_pos != null) {
      data.log_pos = this.log_pos;
    }
    if (this.log_topic0 != null) {
      data.log_topic0 = this.log_topic0;
    }
    if (this.value_from_topic != null) {
      data.value_from_topic = this.value_from_topic;
    }
    if (this.value_index != null) {
      data.value_index = this.value_index;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    if (this.topics_length != null) {
      data.topics_length = this.topics_length;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_14.BinaryWriter();
    if (this.contract_address.length)
      writer.writeString(1, this.contract_address);
    if (this.log_pos != 0)
      writer.writeUint64(2, this.log_pos);
    if (this.log_topic0.length)
      writer.writeString(3, this.log_topic0);
    if (this.value_from_topic != false)
      writer.writeBool(4, this.value_from_topic);
    if (this.value_index != 0)
      writer.writeUint64(5, this.value_index);
    if (this.value.length)
      writer.writeString(6, this.value);
    if (this.topics_length != 0)
      writer.writeUint64(7, this.topics_length);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_14.BinaryReader ? bytes : new pb_14.BinaryReader(bytes), message = new _LogExtractInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.contract_address = reader.readString();
          break;
        case 2:
          message.log_pos = reader.readUint64();
          break;
        case 3:
          message.log_topic0 = reader.readString();
          break;
        case 4:
          message.value_from_topic = reader.readBool();
          break;
        case 5:
          message.value_index = reader.readUint64();
          break;
        case 6:
          message.value = reader.readString();
          break;
        case 7:
          message.topics_length = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _LogExtractInfo.deserialize(bytes);
  }
};
_one_of_decls18 = new WeakMap();
var LogExtractInfo = _LogExtractInfo;
var _one_of_decls19;
var _StorageQueryInfo = class _StorageQueryInfo extends pb_14.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls19, []);
    pb_14.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __privateGet(this, _one_of_decls19));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("account" in data && data.account != void 0) {
        this.account = data.account;
      }
      if ("storage_keys" in data && data.storage_keys != void 0) {
        this.storage_keys = data.storage_keys;
      }
      if ("blk_num" in data && data.blk_num != void 0) {
        this.blk_num = data.blk_num;
      }
    }
  }
  get account() {
    return pb_14.Message.getFieldWithDefault(this, 1, "");
  }
  set account(value) {
    pb_14.Message.setField(this, 1, value);
  }
  get storage_keys() {
    return pb_14.Message.getFieldWithDefault(this, 2, []);
  }
  set storage_keys(value) {
    pb_14.Message.setField(this, 2, value);
  }
  get blk_num() {
    return pb_14.Message.getFieldWithDefault(this, 3, 0);
  }
  set blk_num(value) {
    pb_14.Message.setField(this, 3, value);
  }
  static fromObject(data) {
    const message = new _StorageQueryInfo({});
    if (data.account != null) {
      message.account = data.account;
    }
    if (data.storage_keys != null) {
      message.storage_keys = data.storage_keys;
    }
    if (data.blk_num != null) {
      message.blk_num = data.blk_num;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.account != null) {
      data.account = this.account;
    }
    if (this.storage_keys != null) {
      data.storage_keys = this.storage_keys;
    }
    if (this.blk_num != null) {
      data.blk_num = this.blk_num;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_14.BinaryWriter();
    if (this.account.length)
      writer.writeString(1, this.account);
    if (this.storage_keys.length)
      writer.writeRepeatedString(2, this.storage_keys);
    if (this.blk_num != 0)
      writer.writeUint64(3, this.blk_num);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_14.BinaryReader ? bytes : new pb_14.BinaryReader(bytes), message = new _StorageQueryInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.account = reader.readString();
          break;
        case 2:
          pb_14.Message.addToRepeatedField(message, 2, reader.readString());
          break;
        case 3:
          message.blk_num = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _StorageQueryInfo.deserialize(bytes);
  }
};
_one_of_decls19 = new WeakMap();
var StorageQueryInfo = _StorageQueryInfo;
var _one_of_decls20;
var _TransactionInfo = class _TransactionInfo extends pb_14.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls20, []);
    pb_14.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls20));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("transaction_hash" in data && data.transaction_hash != void 0) {
        this.transaction_hash = data.transaction_hash;
      }
    }
  }
  get transaction_hash() {
    return pb_14.Message.getFieldWithDefault(this, 1, "");
  }
  set transaction_hash(value) {
    pb_14.Message.setField(this, 1, value);
  }
  static fromObject(data) {
    const message = new _TransactionInfo({});
    if (data.transaction_hash != null) {
      message.transaction_hash = data.transaction_hash;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.transaction_hash != null) {
      data.transaction_hash = this.transaction_hash;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_14.BinaryWriter();
    if (this.transaction_hash.length)
      writer.writeString(1, this.transaction_hash);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_14.BinaryReader ? bytes : new pb_14.BinaryReader(bytes), message = new _TransactionInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.transaction_hash = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _TransactionInfo.deserialize(bytes);
  }
};
_one_of_decls20 = new WeakMap();
var TransactionInfo = _TransactionInfo;

// proto/brevis/gateway.ts
import * as pb_15 from "google-protobuf";
import * as grpc_12 from "@grpc/grpc-js";
var _one_of_decls21;
var _ErrMsg = class _ErrMsg extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls21, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls21));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("code" in data && data.code != void 0) {
        this.code = data.code;
      }
      if ("msg" in data && data.msg != void 0) {
        this.msg = data.msg;
      }
    }
  }
  get code() {
    return pb_15.Message.getFieldWithDefault(this, 1, 0 /* ERROR_CODE_UNDEFINED */);
  }
  set code(value) {
    pb_15.Message.setField(this, 1, value);
  }
  get msg() {
    return pb_15.Message.getFieldWithDefault(this, 2, "");
  }
  set msg(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _ErrMsg({});
    if (data.code != null) {
      message.code = data.code;
    }
    if (data.msg != null) {
      message.msg = data.msg;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.code != null) {
      data.code = this.code;
    }
    if (this.msg != null) {
      data.msg = this.msg;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.code != 0 /* ERROR_CODE_UNDEFINED */)
      writer.writeEnum(1, this.code);
    if (this.msg.length)
      writer.writeString(2, this.msg);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _ErrMsg();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.code = reader.readEnum();
          break;
        case 2:
          message.msg = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ErrMsg.deserialize(bytes);
  }
};
_one_of_decls21 = new WeakMap();
var ErrMsg = _ErrMsg;
var _one_of_decls22;
var _PrepareQueryRequest = class _PrepareQueryRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls22, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], __privateGet(this, _one_of_decls22));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("chain_id" in data && data.chain_id != void 0) {
        this.chain_id = data.chain_id;
      }
      if ("receipt_infos" in data && data.receipt_infos != void 0) {
        this.receipt_infos = data.receipt_infos;
      }
      if ("storage_query_infos" in data && data.storage_query_infos != void 0) {
        this.storage_query_infos = data.storage_query_infos;
      }
      if ("transaction_infos" in data && data.transaction_infos != void 0) {
        this.transaction_infos = data.transaction_infos;
      }
      if ("app_circuit_info" in data && data.app_circuit_info != void 0) {
        this.app_circuit_info = data.app_circuit_info;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
      if ("option" in data && data.option != void 0) {
        this.option = data.option;
      }
      if ("use_plonky2" in data && data.use_plonky2 != void 0) {
        this.use_plonky2 = data.use_plonky2;
      }
    }
  }
  get chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 1, 0);
  }
  set chain_id(value) {
    pb_15.Message.setField(this, 1, value);
  }
  get receipt_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, ReceiptInfo, 2);
  }
  set receipt_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 2, value);
  }
  get storage_query_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, StorageQueryInfo, 3);
  }
  set storage_query_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 3, value);
  }
  get transaction_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, TransactionInfo, 4);
  }
  set transaction_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 4, value);
  }
  get app_circuit_info() {
    return pb_15.Message.getWrapperField(this, AppCircuitInfo, 5);
  }
  set app_circuit_info(value) {
    pb_15.Message.setWrapperField(this, 5, value);
  }
  get has_app_circuit_info() {
    return pb_15.Message.getField(this, 5) != null;
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 6, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 6, value);
  }
  get option() {
    return pb_15.Message.getFieldWithDefault(this, 7, 0 /* ZK_MODE */);
  }
  set option(value) {
    pb_15.Message.setField(this, 7, value);
  }
  /** @deprecated*/
  get use_plonky2() {
    return pb_15.Message.getFieldWithDefault(this, 8, false);
  }
  /** @deprecated*/
  set use_plonky2(value) {
    pb_15.Message.setField(this, 8, value);
  }
  static fromObject(data) {
    const message = new _PrepareQueryRequest({});
    if (data.chain_id != null) {
      message.chain_id = data.chain_id;
    }
    if (data.receipt_infos != null) {
      message.receipt_infos = data.receipt_infos.map((item) => ReceiptInfo.fromObject(item));
    }
    if (data.storage_query_infos != null) {
      message.storage_query_infos = data.storage_query_infos.map((item) => StorageQueryInfo.fromObject(item));
    }
    if (data.transaction_infos != null) {
      message.transaction_infos = data.transaction_infos.map((item) => TransactionInfo.fromObject(item));
    }
    if (data.app_circuit_info != null) {
      message.app_circuit_info = AppCircuitInfo.fromObject(data.app_circuit_info);
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    if (data.option != null) {
      message.option = data.option;
    }
    if (data.use_plonky2 != null) {
      message.use_plonky2 = data.use_plonky2;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.chain_id != null) {
      data.chain_id = this.chain_id;
    }
    if (this.receipt_infos != null) {
      data.receipt_infos = this.receipt_infos.map((item) => item.toObject());
    }
    if (this.storage_query_infos != null) {
      data.storage_query_infos = this.storage_query_infos.map((item) => item.toObject());
    }
    if (this.transaction_infos != null) {
      data.transaction_infos = this.transaction_infos.map((item) => item.toObject());
    }
    if (this.app_circuit_info != null) {
      data.app_circuit_info = this.app_circuit_info.toObject();
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    if (this.option != null) {
      data.option = this.option;
    }
    if (this.use_plonky2 != null) {
      data.use_plonky2 = this.use_plonky2;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.chain_id != 0)
      writer.writeUint64(1, this.chain_id);
    if (this.receipt_infos.length)
      writer.writeRepeatedMessage(2, this.receipt_infos, (item) => item.serialize(writer));
    if (this.storage_query_infos.length)
      writer.writeRepeatedMessage(3, this.storage_query_infos, (item) => item.serialize(writer));
    if (this.transaction_infos.length)
      writer.writeRepeatedMessage(4, this.transaction_infos, (item) => item.serialize(writer));
    if (this.has_app_circuit_info)
      writer.writeMessage(5, this.app_circuit_info, () => this.app_circuit_info.serialize(writer));
    if (this.target_chain_id != 0)
      writer.writeUint64(6, this.target_chain_id);
    if (this.option != 0 /* ZK_MODE */)
      writer.writeEnum(7, this.option);
    if (this.use_plonky2 != false)
      writer.writeBool(8, this.use_plonky2);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _PrepareQueryRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.chain_id = reader.readUint64();
          break;
        case 2:
          reader.readMessage(message.receipt_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 2, ReceiptInfo.deserialize(reader), ReceiptInfo));
          break;
        case 3:
          reader.readMessage(message.storage_query_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 3, StorageQueryInfo.deserialize(reader), StorageQueryInfo));
          break;
        case 4:
          reader.readMessage(message.transaction_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 4, TransactionInfo.deserialize(reader), TransactionInfo));
          break;
        case 5:
          reader.readMessage(message.app_circuit_info, () => message.app_circuit_info = AppCircuitInfo.deserialize(reader));
          break;
        case 6:
          message.target_chain_id = reader.readUint64();
          break;
        case 7:
          message.option = reader.readEnum();
          break;
        case 8:
          message.use_plonky2 = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _PrepareQueryRequest.deserialize(bytes);
  }
};
_one_of_decls22 = new WeakMap();
var PrepareQueryRequest = _PrepareQueryRequest;
var _one_of_decls23;
var _PrepareQueryResponse = class _PrepareQueryResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls23, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls23));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("query_key" in data && data.query_key != void 0) {
        this.query_key = data.query_key;
      }
      if ("fee" in data && data.fee != void 0) {
        this.fee = data.fee;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get query_key() {
    return pb_15.Message.getWrapperField(this, QueryKey, 2);
  }
  set query_key(value) {
    pb_15.Message.setWrapperField(this, 2, value);
  }
  get has_query_key() {
    return pb_15.Message.getField(this, 2) != null;
  }
  get fee() {
    return pb_15.Message.getFieldWithDefault(this, 3, "");
  }
  set fee(value) {
    pb_15.Message.setField(this, 3, value);
  }
  static fromObject(data) {
    const message = new _PrepareQueryResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.query_key != null) {
      message.query_key = QueryKey.fromObject(data.query_key);
    }
    if (data.fee != null) {
      message.fee = data.fee;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.query_key != null) {
      data.query_key = this.query_key.toObject();
    }
    if (this.fee != null) {
      data.fee = this.fee;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.has_query_key)
      writer.writeMessage(2, this.query_key, () => this.query_key.serialize(writer));
    if (this.fee.length)
      writer.writeString(3, this.fee);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _PrepareQueryResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          reader.readMessage(message.query_key, () => message.query_key = QueryKey.deserialize(reader));
          break;
        case 3:
          message.fee = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _PrepareQueryResponse.deserialize(bytes);
  }
};
_one_of_decls23 = new WeakMap();
var PrepareQueryResponse = _PrepareQueryResponse;
var _one_of_decls24;
var _SubmitAppCircuitProofRequest = class _SubmitAppCircuitProofRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls24, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls24));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("query_key" in data && data.query_key != void 0) {
        this.query_key = data.query_key;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
      if ("proof" in data && data.proof != void 0) {
        this.proof = data.proof;
      }
    }
  }
  get query_key() {
    return pb_15.Message.getWrapperField(this, QueryKey, 1);
  }
  set query_key(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_query_key() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 2, value);
  }
  get proof() {
    return pb_15.Message.getFieldWithDefault(this, 3, "");
  }
  set proof(value) {
    pb_15.Message.setField(this, 3, value);
  }
  static fromObject(data) {
    const message = new _SubmitAppCircuitProofRequest({});
    if (data.query_key != null) {
      message.query_key = QueryKey.fromObject(data.query_key);
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    if (data.proof != null) {
      message.proof = data.proof;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.query_key != null) {
      data.query_key = this.query_key.toObject();
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    if (this.proof != null) {
      data.proof = this.proof;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_query_key)
      writer.writeMessage(1, this.query_key, () => this.query_key.serialize(writer));
    if (this.target_chain_id != 0)
      writer.writeUint64(2, this.target_chain_id);
    if (this.proof.length)
      writer.writeString(3, this.proof);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _SubmitAppCircuitProofRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.query_key, () => message.query_key = QueryKey.deserialize(reader));
          break;
        case 2:
          message.target_chain_id = reader.readUint64();
          break;
        case 3:
          message.proof = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _SubmitAppCircuitProofRequest.deserialize(bytes);
  }
};
_one_of_decls24 = new WeakMap();
var SubmitAppCircuitProofRequest = _SubmitAppCircuitProofRequest;
var _one_of_decls25;
var _SubmitAppCircuitProofResponse = class _SubmitAppCircuitProofResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls25, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls25));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("success" in data && data.success != void 0) {
        this.success = data.success;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get success() {
    return pb_15.Message.getFieldWithDefault(this, 2, false);
  }
  set success(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _SubmitAppCircuitProofResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.success != null) {
      message.success = data.success;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.success != null) {
      data.success = this.success;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.success != false)
      writer.writeBool(2, this.success);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _SubmitAppCircuitProofResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          message.success = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _SubmitAppCircuitProofResponse.deserialize(bytes);
  }
};
_one_of_decls25 = new WeakMap();
var SubmitAppCircuitProofResponse = _SubmitAppCircuitProofResponse;
var _one_of_decls26;
var _GetQueryStatusRequest = class _GetQueryStatusRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls26, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls26));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("query_key" in data && data.query_key != void 0) {
        this.query_key = data.query_key;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
    }
  }
  get query_key() {
    return pb_15.Message.getWrapperField(this, QueryKey, 1);
  }
  set query_key(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_query_key() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _GetQueryStatusRequest({});
    if (data.query_key != null) {
      message.query_key = QueryKey.fromObject(data.query_key);
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.query_key != null) {
      data.query_key = this.query_key.toObject();
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_query_key)
      writer.writeMessage(1, this.query_key, () => this.query_key.serialize(writer));
    if (this.target_chain_id != 0)
      writer.writeUint64(2, this.target_chain_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetQueryStatusRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.query_key, () => message.query_key = QueryKey.deserialize(reader));
          break;
        case 2:
          message.target_chain_id = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetQueryStatusRequest.deserialize(bytes);
  }
};
_one_of_decls26 = new WeakMap();
var GetQueryStatusRequest = _GetQueryStatusRequest;
var _one_of_decls27;
var _GetQueryStatusResponse = class _GetQueryStatusResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls27, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls27));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("status" in data && data.status != void 0) {
        this.status = data.status;
      }
      if ("tx_hash" in data && data.tx_hash != void 0) {
        this.tx_hash = data.tx_hash;
      }
      if ("proof" in data && data.proof != void 0) {
        this.proof = data.proof;
      }
      if ("proof_data" in data && data.proof_data != void 0) {
        this.proof_data = data.proof_data;
      }
      if ("circuit_output" in data && data.circuit_output != void 0) {
        this.circuit_output = data.circuit_output;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get status() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0 /* QS_UNKNOWN */);
  }
  set status(value) {
    pb_15.Message.setField(this, 2, value);
  }
  get tx_hash() {
    return pb_15.Message.getFieldWithDefault(this, 3, "");
  }
  set tx_hash(value) {
    pb_15.Message.setField(this, 3, value);
  }
  get proof() {
    return pb_15.Message.getFieldWithDefault(this, 4, "");
  }
  set proof(value) {
    pb_15.Message.setField(this, 4, value);
  }
  get proof_data() {
    return pb_15.Message.getWrapperField(this, ProofData, 5);
  }
  set proof_data(value) {
    pb_15.Message.setWrapperField(this, 5, value);
  }
  get has_proof_data() {
    return pb_15.Message.getField(this, 5) != null;
  }
  get circuit_output() {
    return pb_15.Message.getFieldWithDefault(this, 6, "");
  }
  set circuit_output(value) {
    pb_15.Message.setField(this, 6, value);
  }
  static fromObject(data) {
    const message = new _GetQueryStatusResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.status != null) {
      message.status = data.status;
    }
    if (data.tx_hash != null) {
      message.tx_hash = data.tx_hash;
    }
    if (data.proof != null) {
      message.proof = data.proof;
    }
    if (data.proof_data != null) {
      message.proof_data = ProofData.fromObject(data.proof_data);
    }
    if (data.circuit_output != null) {
      message.circuit_output = data.circuit_output;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.status != null) {
      data.status = this.status;
    }
    if (this.tx_hash != null) {
      data.tx_hash = this.tx_hash;
    }
    if (this.proof != null) {
      data.proof = this.proof;
    }
    if (this.proof_data != null) {
      data.proof_data = this.proof_data.toObject();
    }
    if (this.circuit_output != null) {
      data.circuit_output = this.circuit_output;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.status != 0 /* QS_UNKNOWN */)
      writer.writeEnum(2, this.status);
    if (this.tx_hash.length)
      writer.writeString(3, this.tx_hash);
    if (this.proof.length)
      writer.writeString(4, this.proof);
    if (this.has_proof_data)
      writer.writeMessage(5, this.proof_data, () => this.proof_data.serialize(writer));
    if (this.circuit_output.length)
      writer.writeString(6, this.circuit_output);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetQueryStatusResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          message.status = reader.readEnum();
          break;
        case 3:
          message.tx_hash = reader.readString();
          break;
        case 4:
          message.proof = reader.readString();
          break;
        case 5:
          reader.readMessage(message.proof_data, () => message.proof_data = ProofData.deserialize(reader));
          break;
        case 6:
          message.circuit_output = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetQueryStatusResponse.deserialize(bytes);
  }
};
_one_of_decls27 = new WeakMap();
var GetQueryStatusResponse = _GetQueryStatusResponse;
var _one_of_decls28;
var _GetQueryInfoForOPRequest = class _GetQueryInfoForOPRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls28, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls28));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("query_hash" in data && data.query_hash != void 0) {
        this.query_hash = data.query_hash;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
    }
  }
  get query_hash() {
    return pb_15.Message.getFieldWithDefault(this, 1, "");
  }
  set query_hash(value) {
    pb_15.Message.setField(this, 1, value);
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _GetQueryInfoForOPRequest({});
    if (data.query_hash != null) {
      message.query_hash = data.query_hash;
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.query_hash != null) {
      data.query_hash = this.query_hash;
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.query_hash.length)
      writer.writeString(1, this.query_hash);
    if (this.target_chain_id != 0)
      writer.writeUint64(2, this.target_chain_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetQueryInfoForOPRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.query_hash = reader.readString();
          break;
        case 2:
          message.target_chain_id = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetQueryInfoForOPRequest.deserialize(bytes);
  }
};
_one_of_decls28 = new WeakMap();
var GetQueryInfoForOPRequest = _GetQueryInfoForOPRequest;
var _one_of_decls29;
var _GetQueryInfoForOPResponse = class _GetQueryInfoForOPResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls29, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls29));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("query_info" in data && data.query_info != void 0) {
        this.query_info = data.query_info;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get query_info() {
    return pb_15.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
  }
  set query_info(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _GetQueryInfoForOPResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.query_info != null) {
      message.query_info = data.query_info;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.query_info != null) {
      data.query_info = this.query_info;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.query_info.length)
      writer.writeBytes(2, this.query_info);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetQueryInfoForOPResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          message.query_info = reader.readBytes();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetQueryInfoForOPResponse.deserialize(bytes);
  }
};
_one_of_decls29 = new WeakMap();
var GetQueryInfoForOPResponse = _GetQueryInfoForOPResponse;
var _one_of_decls30;
var _GetSingleRunParamsRequest = class _GetSingleRunParamsRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls30, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls30));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("query_key" in data && data.query_key != void 0) {
        this.query_key = data.query_key;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
    }
  }
  get query_key() {
    return pb_15.Message.getWrapperField(this, QueryKey, 1);
  }
  set query_key(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_query_key() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _GetSingleRunParamsRequest({});
    if (data.query_key != null) {
      message.query_key = QueryKey.fromObject(data.query_key);
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.query_key != null) {
      data.query_key = this.query_key.toObject();
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_query_key)
      writer.writeMessage(1, this.query_key, () => this.query_key.serialize(writer));
    if (this.target_chain_id != 0)
      writer.writeUint64(2, this.target_chain_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetSingleRunParamsRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.query_key, () => message.query_key = QueryKey.deserialize(reader));
          break;
        case 2:
          message.target_chain_id = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetSingleRunParamsRequest.deserialize(bytes);
  }
};
_one_of_decls30 = new WeakMap();
var GetSingleRunParamsRequest = _GetSingleRunParamsRequest;
var _one_of_decls31;
var _GetSingleRunParamsResponse = class _GetSingleRunParamsResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls31, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], __privateGet(this, _one_of_decls31));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("src_chain_id" in data && data.src_chain_id != void 0) {
        this.src_chain_id = data.src_chain_id;
      }
      if ("proof_data" in data && data.proof_data != void 0) {
        this.proof_data = data.proof_data;
      }
      if ("merkle_root" in data && data.merkle_root != void 0) {
        this.merkle_root = data.merkle_root;
      }
      if ("merkle_proof" in data && data.merkle_proof != void 0) {
        this.merkle_proof = data.merkle_proof;
      }
      if ("node_index" in data && data.node_index != void 0) {
        this.node_index = data.node_index;
      }
      if ("app_circuit_output" in data && data.app_circuit_output != void 0) {
        this.app_circuit_output = data.app_circuit_output;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get src_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set src_chain_id(value) {
    pb_15.Message.setField(this, 2, value);
  }
  get proof_data() {
    return pb_15.Message.getWrapperField(this, ProofData, 3);
  }
  set proof_data(value) {
    pb_15.Message.setWrapperField(this, 3, value);
  }
  get has_proof_data() {
    return pb_15.Message.getField(this, 3) != null;
  }
  get merkle_root() {
    return pb_15.Message.getFieldWithDefault(this, 4, "");
  }
  set merkle_root(value) {
    pb_15.Message.setField(this, 4, value);
  }
  get merkle_proof() {
    return pb_15.Message.getFieldWithDefault(this, 5, []);
  }
  set merkle_proof(value) {
    pb_15.Message.setField(this, 5, value);
  }
  get node_index() {
    return pb_15.Message.getFieldWithDefault(this, 6, 0);
  }
  set node_index(value) {
    pb_15.Message.setField(this, 6, value);
  }
  get app_circuit_output() {
    return pb_15.Message.getFieldWithDefault(this, 7, "");
  }
  set app_circuit_output(value) {
    pb_15.Message.setField(this, 7, value);
  }
  static fromObject(data) {
    const message = new _GetSingleRunParamsResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.src_chain_id != null) {
      message.src_chain_id = data.src_chain_id;
    }
    if (data.proof_data != null) {
      message.proof_data = ProofData.fromObject(data.proof_data);
    }
    if (data.merkle_root != null) {
      message.merkle_root = data.merkle_root;
    }
    if (data.merkle_proof != null) {
      message.merkle_proof = data.merkle_proof;
    }
    if (data.node_index != null) {
      message.node_index = data.node_index;
    }
    if (data.app_circuit_output != null) {
      message.app_circuit_output = data.app_circuit_output;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.src_chain_id != null) {
      data.src_chain_id = this.src_chain_id;
    }
    if (this.proof_data != null) {
      data.proof_data = this.proof_data.toObject();
    }
    if (this.merkle_root != null) {
      data.merkle_root = this.merkle_root;
    }
    if (this.merkle_proof != null) {
      data.merkle_proof = this.merkle_proof;
    }
    if (this.node_index != null) {
      data.node_index = this.node_index;
    }
    if (this.app_circuit_output != null) {
      data.app_circuit_output = this.app_circuit_output;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.src_chain_id != 0)
      writer.writeUint64(2, this.src_chain_id);
    if (this.has_proof_data)
      writer.writeMessage(3, this.proof_data, () => this.proof_data.serialize(writer));
    if (this.merkle_root.length)
      writer.writeString(4, this.merkle_root);
    if (this.merkle_proof.length)
      writer.writeRepeatedString(5, this.merkle_proof);
    if (this.node_index != 0)
      writer.writeUint64(6, this.node_index);
    if (this.app_circuit_output.length)
      writer.writeString(7, this.app_circuit_output);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _GetSingleRunParamsResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          message.src_chain_id = reader.readUint64();
          break;
        case 3:
          reader.readMessage(message.proof_data, () => message.proof_data = ProofData.deserialize(reader));
          break;
        case 4:
          message.merkle_root = reader.readString();
          break;
        case 5:
          pb_15.Message.addToRepeatedField(message, 5, reader.readString());
          break;
        case 6:
          message.node_index = reader.readUint64();
          break;
        case 7:
          message.app_circuit_output = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _GetSingleRunParamsResponse.deserialize(bytes);
  }
};
_one_of_decls31 = new WeakMap();
var GetSingleRunParamsResponse = _GetSingleRunParamsResponse;
var _one_of_decls32;
var _ProofData = class _ProofData extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls32, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls32));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("commit_hash" in data && data.commit_hash != void 0) {
        this.commit_hash = data.commit_hash;
      }
      if ("vk_hash" in data && data.vk_hash != void 0) {
        this.vk_hash = data.vk_hash;
      }
      if ("app_commit_hash" in data && data.app_commit_hash != void 0) {
        this.app_commit_hash = data.app_commit_hash;
      }
      if ("app_vk_hash" in data && data.app_vk_hash != void 0) {
        this.app_vk_hash = data.app_vk_hash;
      }
      if ("smt_root" in data && data.smt_root != void 0) {
        this.smt_root = data.smt_root;
      }
      if ("dummy_input_commitment" in data && data.dummy_input_commitment != void 0) {
        this.dummy_input_commitment = data.dummy_input_commitment;
      }
    }
  }
  get commit_hash() {
    return pb_15.Message.getFieldWithDefault(this, 1, "");
  }
  set commit_hash(value) {
    pb_15.Message.setField(this, 1, value);
  }
  /** @deprecated*/
  get vk_hash() {
    return pb_15.Message.getFieldWithDefault(this, 2, "");
  }
  /** @deprecated*/
  set vk_hash(value) {
    pb_15.Message.setField(this, 2, value);
  }
  get app_commit_hash() {
    return pb_15.Message.getFieldWithDefault(this, 3, "");
  }
  set app_commit_hash(value) {
    pb_15.Message.setField(this, 3, value);
  }
  get app_vk_hash() {
    return pb_15.Message.getFieldWithDefault(this, 4, "");
  }
  set app_vk_hash(value) {
    pb_15.Message.setField(this, 4, value);
  }
  get smt_root() {
    return pb_15.Message.getFieldWithDefault(this, 5, "");
  }
  set smt_root(value) {
    pb_15.Message.setField(this, 5, value);
  }
  get dummy_input_commitment() {
    return pb_15.Message.getFieldWithDefault(this, 6, "");
  }
  set dummy_input_commitment(value) {
    pb_15.Message.setField(this, 6, value);
  }
  static fromObject(data) {
    const message = new _ProofData({});
    if (data.commit_hash != null) {
      message.commit_hash = data.commit_hash;
    }
    if (data.vk_hash != null) {
      message.vk_hash = data.vk_hash;
    }
    if (data.app_commit_hash != null) {
      message.app_commit_hash = data.app_commit_hash;
    }
    if (data.app_vk_hash != null) {
      message.app_vk_hash = data.app_vk_hash;
    }
    if (data.smt_root != null) {
      message.smt_root = data.smt_root;
    }
    if (data.dummy_input_commitment != null) {
      message.dummy_input_commitment = data.dummy_input_commitment;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.commit_hash != null) {
      data.commit_hash = this.commit_hash;
    }
    if (this.vk_hash != null) {
      data.vk_hash = this.vk_hash;
    }
    if (this.app_commit_hash != null) {
      data.app_commit_hash = this.app_commit_hash;
    }
    if (this.app_vk_hash != null) {
      data.app_vk_hash = this.app_vk_hash;
    }
    if (this.smt_root != null) {
      data.smt_root = this.smt_root;
    }
    if (this.dummy_input_commitment != null) {
      data.dummy_input_commitment = this.dummy_input_commitment;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.commit_hash.length)
      writer.writeString(1, this.commit_hash);
    if (this.vk_hash.length)
      writer.writeString(2, this.vk_hash);
    if (this.app_commit_hash.length)
      writer.writeString(3, this.app_commit_hash);
    if (this.app_vk_hash.length)
      writer.writeString(4, this.app_vk_hash);
    if (this.smt_root.length)
      writer.writeString(5, this.smt_root);
    if (this.dummy_input_commitment.length)
      writer.writeString(6, this.dummy_input_commitment);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _ProofData();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.commit_hash = reader.readString();
          break;
        case 2:
          message.vk_hash = reader.readString();
          break;
        case 3:
          message.app_commit_hash = reader.readString();
          break;
        case 4:
          message.app_vk_hash = reader.readString();
          break;
        case 5:
          message.smt_root = reader.readString();
          break;
        case 6:
          message.dummy_input_commitment = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _ProofData.deserialize(bytes);
  }
};
_one_of_decls32 = new WeakMap();
var ProofData = _ProofData;
var _one_of_decls33;
var _SendBatchQueriesRequest = class _SendBatchQueriesRequest extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls33, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __privateGet(this, _one_of_decls33));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("chain_id" in data && data.chain_id != void 0) {
        this.chain_id = data.chain_id;
      }
      if ("queries" in data && data.queries != void 0) {
        this.queries = data.queries;
      }
      if ("target_chain_id" in data && data.target_chain_id != void 0) {
        this.target_chain_id = data.target_chain_id;
      }
      if ("option" in data && data.option != void 0) {
        this.option = data.option;
      }
      if ("api_key" in data && data.api_key != void 0) {
        this.api_key = data.api_key;
      }
    }
  }
  get chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 1, 0);
  }
  set chain_id(value) {
    pb_15.Message.setField(this, 1, value);
  }
  get queries() {
    return pb_15.Message.getRepeatedWrapperField(this, Query, 2);
  }
  set queries(value) {
    pb_15.Message.setRepeatedWrapperField(this, 2, value);
  }
  get target_chain_id() {
    return pb_15.Message.getFieldWithDefault(this, 3, 0);
  }
  set target_chain_id(value) {
    pb_15.Message.setField(this, 3, value);
  }
  get option() {
    return pb_15.Message.getFieldWithDefault(this, 4, 0 /* ZK_MODE */);
  }
  set option(value) {
    pb_15.Message.setField(this, 4, value);
  }
  get api_key() {
    return pb_15.Message.getFieldWithDefault(this, 5, "");
  }
  set api_key(value) {
    pb_15.Message.setField(this, 5, value);
  }
  static fromObject(data) {
    const message = new _SendBatchQueriesRequest({});
    if (data.chain_id != null) {
      message.chain_id = data.chain_id;
    }
    if (data.queries != null) {
      message.queries = data.queries.map((item) => Query.fromObject(item));
    }
    if (data.target_chain_id != null) {
      message.target_chain_id = data.target_chain_id;
    }
    if (data.option != null) {
      message.option = data.option;
    }
    if (data.api_key != null) {
      message.api_key = data.api_key;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.chain_id != null) {
      data.chain_id = this.chain_id;
    }
    if (this.queries != null) {
      data.queries = this.queries.map((item) => item.toObject());
    }
    if (this.target_chain_id != null) {
      data.target_chain_id = this.target_chain_id;
    }
    if (this.option != null) {
      data.option = this.option;
    }
    if (this.api_key != null) {
      data.api_key = this.api_key;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.chain_id != 0)
      writer.writeUint64(1, this.chain_id);
    if (this.queries.length)
      writer.writeRepeatedMessage(2, this.queries, (item) => item.serialize(writer));
    if (this.target_chain_id != 0)
      writer.writeUint64(3, this.target_chain_id);
    if (this.option != 0 /* ZK_MODE */)
      writer.writeEnum(4, this.option);
    if (this.api_key.length)
      writer.writeString(5, this.api_key);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _SendBatchQueriesRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.chain_id = reader.readUint64();
          break;
        case 2:
          reader.readMessage(message.queries, () => pb_15.Message.addToRepeatedWrapperField(message, 2, Query.deserialize(reader), Query));
          break;
        case 3:
          message.target_chain_id = reader.readUint64();
          break;
        case 4:
          message.option = reader.readEnum();
          break;
        case 5:
          message.api_key = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _SendBatchQueriesRequest.deserialize(bytes);
  }
};
_one_of_decls33 = new WeakMap();
var SendBatchQueriesRequest = _SendBatchQueriesRequest;
var _one_of_decls34;
var _Query = class _Query extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls34, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], __privateGet(this, _one_of_decls34));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("receipt_infos" in data && data.receipt_infos != void 0) {
        this.receipt_infos = data.receipt_infos;
      }
      if ("storage_query_infos" in data && data.storage_query_infos != void 0) {
        this.storage_query_infos = data.storage_query_infos;
      }
      if ("transaction_infos" in data && data.transaction_infos != void 0) {
        this.transaction_infos = data.transaction_infos;
      }
      if ("app_circuit_info" in data && data.app_circuit_info != void 0) {
        this.app_circuit_info = data.app_circuit_info;
      }
      if ("use_plonky2" in data && data.use_plonky2 != void 0) {
        this.use_plonky2 = data.use_plonky2;
      }
    }
  }
  get receipt_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, ReceiptInfo, 1);
  }
  set receipt_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 1, value);
  }
  get storage_query_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, StorageQueryInfo, 2);
  }
  set storage_query_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 2, value);
  }
  get transaction_infos() {
    return pb_15.Message.getRepeatedWrapperField(this, TransactionInfo, 3);
  }
  set transaction_infos(value) {
    pb_15.Message.setRepeatedWrapperField(this, 3, value);
  }
  get app_circuit_info() {
    return pb_15.Message.getWrapperField(this, AppCircuitInfoWithProof, 4);
  }
  set app_circuit_info(value) {
    pb_15.Message.setWrapperField(this, 4, value);
  }
  get has_app_circuit_info() {
    return pb_15.Message.getField(this, 4) != null;
  }
  /** @deprecated*/
  get use_plonky2() {
    return pb_15.Message.getFieldWithDefault(this, 5, false);
  }
  /** @deprecated*/
  set use_plonky2(value) {
    pb_15.Message.setField(this, 5, value);
  }
  static fromObject(data) {
    const message = new _Query({});
    if (data.receipt_infos != null) {
      message.receipt_infos = data.receipt_infos.map((item) => ReceiptInfo.fromObject(item));
    }
    if (data.storage_query_infos != null) {
      message.storage_query_infos = data.storage_query_infos.map((item) => StorageQueryInfo.fromObject(item));
    }
    if (data.transaction_infos != null) {
      message.transaction_infos = data.transaction_infos.map((item) => TransactionInfo.fromObject(item));
    }
    if (data.app_circuit_info != null) {
      message.app_circuit_info = AppCircuitInfoWithProof.fromObject(data.app_circuit_info);
    }
    if (data.use_plonky2 != null) {
      message.use_plonky2 = data.use_plonky2;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.receipt_infos != null) {
      data.receipt_infos = this.receipt_infos.map((item) => item.toObject());
    }
    if (this.storage_query_infos != null) {
      data.storage_query_infos = this.storage_query_infos.map((item) => item.toObject());
    }
    if (this.transaction_infos != null) {
      data.transaction_infos = this.transaction_infos.map((item) => item.toObject());
    }
    if (this.app_circuit_info != null) {
      data.app_circuit_info = this.app_circuit_info.toObject();
    }
    if (this.use_plonky2 != null) {
      data.use_plonky2 = this.use_plonky2;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.receipt_infos.length)
      writer.writeRepeatedMessage(1, this.receipt_infos, (item) => item.serialize(writer));
    if (this.storage_query_infos.length)
      writer.writeRepeatedMessage(2, this.storage_query_infos, (item) => item.serialize(writer));
    if (this.transaction_infos.length)
      writer.writeRepeatedMessage(3, this.transaction_infos, (item) => item.serialize(writer));
    if (this.has_app_circuit_info)
      writer.writeMessage(4, this.app_circuit_info, () => this.app_circuit_info.serialize(writer));
    if (this.use_plonky2 != false)
      writer.writeBool(5, this.use_plonky2);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _Query();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.receipt_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 1, ReceiptInfo.deserialize(reader), ReceiptInfo));
          break;
        case 2:
          reader.readMessage(message.storage_query_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 2, StorageQueryInfo.deserialize(reader), StorageQueryInfo));
          break;
        case 3:
          reader.readMessage(message.transaction_infos, () => pb_15.Message.addToRepeatedWrapperField(message, 3, TransactionInfo.deserialize(reader), TransactionInfo));
          break;
        case 4:
          reader.readMessage(message.app_circuit_info, () => message.app_circuit_info = AppCircuitInfoWithProof.deserialize(reader));
          break;
        case 5:
          message.use_plonky2 = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _Query.deserialize(bytes);
  }
};
_one_of_decls34 = new WeakMap();
var Query = _Query;
var _one_of_decls35;
var _SendBatchQueriesResponse = class _SendBatchQueriesResponse extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls35, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __privateGet(this, _one_of_decls35));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("err" in data && data.err != void 0) {
        this.err = data.err;
      }
      if ("query_keys" in data && data.query_keys != void 0) {
        this.query_keys = data.query_keys;
      }
      if ("fee" in data && data.fee != void 0) {
        this.fee = data.fee;
      }
    }
  }
  get err() {
    return pb_15.Message.getWrapperField(this, ErrMsg, 1);
  }
  set err(value) {
    pb_15.Message.setWrapperField(this, 1, value);
  }
  get has_err() {
    return pb_15.Message.getField(this, 1) != null;
  }
  get query_keys() {
    return pb_15.Message.getRepeatedWrapperField(this, QueryKey, 2);
  }
  set query_keys(value) {
    pb_15.Message.setRepeatedWrapperField(this, 2, value);
  }
  get fee() {
    return pb_15.Message.getFieldWithDefault(this, 3, "");
  }
  set fee(value) {
    pb_15.Message.setField(this, 3, value);
  }
  static fromObject(data) {
    const message = new _SendBatchQueriesResponse({});
    if (data.err != null) {
      message.err = ErrMsg.fromObject(data.err);
    }
    if (data.query_keys != null) {
      message.query_keys = data.query_keys.map((item) => QueryKey.fromObject(item));
    }
    if (data.fee != null) {
      message.fee = data.fee;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.err != null) {
      data.err = this.err.toObject();
    }
    if (this.query_keys != null) {
      data.query_keys = this.query_keys.map((item) => item.toObject());
    }
    if (this.fee != null) {
      data.fee = this.fee;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.has_err)
      writer.writeMessage(1, this.err, () => this.err.serialize(writer));
    if (this.query_keys.length)
      writer.writeRepeatedMessage(2, this.query_keys, (item) => item.serialize(writer));
    if (this.fee.length)
      writer.writeString(3, this.fee);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _SendBatchQueriesResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
          break;
        case 2:
          reader.readMessage(message.query_keys, () => pb_15.Message.addToRepeatedWrapperField(message, 2, QueryKey.deserialize(reader), QueryKey));
          break;
        case 3:
          message.fee = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _SendBatchQueriesResponse.deserialize(bytes);
  }
};
_one_of_decls35 = new WeakMap();
var SendBatchQueriesResponse = _SendBatchQueriesResponse;
var _one_of_decls36;
var _QueryKey = class _QueryKey extends pb_15.Message {
  constructor(data) {
    super();
    __privateAdd(this, _one_of_decls36, []);
    pb_15.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __privateGet(this, _one_of_decls36));
    if (!Array.isArray(data) && typeof data == "object") {
      if ("query_hash" in data && data.query_hash != void 0) {
        this.query_hash = data.query_hash;
      }
      if ("nonce" in data && data.nonce != void 0) {
        this.nonce = data.nonce;
      }
    }
  }
  get query_hash() {
    return pb_15.Message.getFieldWithDefault(this, 1, "");
  }
  set query_hash(value) {
    pb_15.Message.setField(this, 1, value);
  }
  get nonce() {
    return pb_15.Message.getFieldWithDefault(this, 2, 0);
  }
  set nonce(value) {
    pb_15.Message.setField(this, 2, value);
  }
  static fromObject(data) {
    const message = new _QueryKey({});
    if (data.query_hash != null) {
      message.query_hash = data.query_hash;
    }
    if (data.nonce != null) {
      message.nonce = data.nonce;
    }
    return message;
  }
  toObject() {
    const data = {};
    if (this.query_hash != null) {
      data.query_hash = this.query_hash;
    }
    if (this.nonce != null) {
      data.nonce = this.nonce;
    }
    return data;
  }
  serialize(w) {
    const writer = w || new pb_15.BinaryWriter();
    if (this.query_hash.length)
      writer.writeString(1, this.query_hash);
    if (this.nonce != 0)
      writer.writeUint64(2, this.nonce);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes) {
    const reader = bytes instanceof pb_15.BinaryReader ? bytes : new pb_15.BinaryReader(bytes), message = new _QueryKey();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.query_hash = reader.readString();
          break;
        case 2:
          message.nonce = reader.readUint64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary() {
    return this.serialize();
  }
  static deserializeBinary(bytes) {
    return _QueryKey.deserialize(bytes);
  }
};
_one_of_decls36 = new WeakMap();
var QueryKey = _QueryKey;
var UnimplementedGatewayService = class {
};
UnimplementedGatewayService.definition = {
  PrepareQuery: {
    path: "/brevis.Gateway/PrepareQuery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => PrepareQueryRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => PrepareQueryResponse.deserialize(new Uint8Array(bytes))
  },
  SubmitAppCircuitProof: {
    path: "/brevis.Gateway/SubmitAppCircuitProof",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => SubmitAppCircuitProofRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => SubmitAppCircuitProofResponse.deserialize(new Uint8Array(bytes))
  },
  GetQueryStatus: {
    path: "/brevis.Gateway/GetQueryStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => GetQueryStatusRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => GetQueryStatusResponse.deserialize(new Uint8Array(bytes))
  },
  GetQueryInfoForOP: {
    path: "/brevis.Gateway/GetQueryInfoForOP",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => GetQueryInfoForOPRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => GetQueryInfoForOPResponse.deserialize(new Uint8Array(bytes))
  },
  GetSingleRunParams: {
    path: "/brevis.Gateway/GetSingleRunParams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => GetSingleRunParamsRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => GetSingleRunParamsResponse.deserialize(new Uint8Array(bytes))
  },
  SendBatchQueries: {
    path: "/brevis.Gateway/SendBatchQueries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (message) => Buffer.from(message.serialize()),
    requestDeserialize: (bytes) => SendBatchQueriesRequest.deserialize(new Uint8Array(bytes)),
    responseSerialize: (message) => Buffer.from(message.serialize()),
    responseDeserialize: (bytes) => SendBatchQueriesResponse.deserialize(new Uint8Array(bytes))
  }
};
var GatewayClient = class extends grpc_12.makeGenericClientConstructor(UnimplementedGatewayService.definition, "Gateway", {}) {
  constructor(address, credentials3, options) {
    super(address, credentials3, options);
    this.PrepareQuery = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.PrepareQuery(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.SubmitAppCircuitProof = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.SubmitAppCircuitProof(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.GetQueryStatus = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.GetQueryStatus(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.GetQueryInfoForOP = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.GetQueryInfoForOP(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.GetSingleRunParams = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.GetSingleRunParams(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
    this.SendBatchQueries = (message, metadata, options) => {
      if (!metadata) {
        metadata = new grpc_12.Metadata();
      }
      if (!options) {
        options = {};
      }
      return new Promise((resolve, reject) => super.SendBatchQueries(message, metadata, options, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      }));
    };
  }
};

// src/brevis-client.ts
var Brevis = class {
  constructor(url) {
    const cred = credentials.createSsl();
    this.client = new GatewayClient(url, cred);
  }
  submit(request, proof, srcChainId, dstChainId, option, apiKey, callbackAddress) {
    return __async(this, null, function* () {
      const res1 = yield this._prepareQuery(
        request,
        proof.circuit_info,
        srcChainId,
        dstChainId,
        option,
        apiKey,
        callbackAddress
      );
      if (res1.has_err) {
        throw new Error(`failed to submit ${res1.err.msg}`);
      }
      console.log("brevis query key", JSON.stringify(res1.query_key));
      const res2 = yield this._submitProof(res1.query_key, dstChainId, proof.proof);
      if (res2.has_err) {
        throw new Error(`failed to submit ${res2.err.msg}`);
      }
      return {
        queryKey: res1.query_key,
        fee: res1.fee
      };
    });
  }
  prepareQuery(request, circuitInfo, srcChainId, dstChainId, option, apiKey, callbackAddress) {
    return __async(this, null, function* () {
      return this._prepareQuery(request, circuitInfo, srcChainId, dstChainId, option, apiKey, callbackAddress);
    });
  }
  submitProof(queryKey, dstChainId, proof) {
    return __async(this, null, function* () {
      yield this._submitProof(queryKey, dstChainId, proof);
    });
  }
  // wait untill the final proof is submitted on-chain and the app contract is called
  wait(queryKey, dstChainId) {
    return __async(this, null, function* () {
      const interval = 1e4;
      const count = 50;
      for (let i = 0; i < count; i++) {
        const res = yield this.getQueryStatus(queryKey, dstChainId);
        switch (res.status) {
          case 4 /* QS_COMPLETE */:
            console.log(`request query: proofId ${queryKey.query_hash} nonce ${queryKey.nonce} success, tx ${res.tx_hash}`);
            return { queryKey, tx: res.tx_hash, success: true };
          case 5 /* QS_FAILED */:
            console.log(`request query: proofId ${queryKey.query_hash} nonce ${queryKey.nonce} failed`);
            return { queryKey, success: false };
          case 1 /* QS_TO_BE_PAID */:
            console.log(
              `query: proofId ${queryKey.query_hash} nonce ${queryKey.nonce} waiting for payment. call BrevisRequest.sendRequest to initiate the payment`
            );
            break;
          default:
            console.log(`query: proofId ${queryKey.query_hash} nonce ${queryKey.nonce} waiting for final tx`);
        }
        yield new Promise((resolve) => setTimeout(resolve, interval));
      }
      console.log(`query: proofId ${queryKey.query_hash} nonce ${queryKey.nonce}  timed out after ${interval * count} seconds`);
      return { queryKey, success: false };
    });
  }
  _prepareQuery(request, circuitInfo, srcChainId, dstChainId, option, apiKey, callbackAddress) {
    return __async(this, null, function* () {
      if (apiKey.length > 0) {
        return this._prepareQueryForBrevisPartnerFlow(
          request,
          circuitInfo,
          srcChainId,
          dstChainId,
          option,
          apiKey,
          callbackAddress
        );
      }
      const req = new PrepareQueryRequest({
        chain_id: srcChainId,
        target_chain_id: dstChainId,
        receipt_infos: request.getReceipts().map((r) => this.buildReceiptInfo(r.data)),
        storage_query_infos: request.getStorages().map((s) => this.buildStorageInfo(s.data)),
        transaction_infos: request.getTransactions().map((t) => this.buildTransactionInfo(t.data)),
        option,
        app_circuit_info: circuitInfo
      });
      const res = yield this.client.PrepareQuery(req);
      return res;
    });
  }
  _prepareQueryForBrevisPartnerFlow(request, circuitInfo, srcChainId, dstChainId, option, apiKey, callbackAddress) {
    return __async(this, null, function* () {
      if (callbackAddress.length == 0) {
        return new PrepareQueryResponse({
          err: new ErrMsg({
            msg: "brevis partner flow needs callback address"
          })
        });
      }
      const req = new SendBatchQueriesRequest({
        chain_id: srcChainId,
        target_chain_id: dstChainId,
        queries: [
          new Query({
            receipt_infos: request.getReceipts().map((r) => this.buildReceiptInfo(r.data)),
            storage_query_infos: request.getStorages().map((s) => this.buildStorageInfo(s.data)),
            transaction_infos: request.getTransactions().map((t) => this.buildTransactionInfo(t.data)),
            app_circuit_info: new AppCircuitInfoWithProof({
              output_commitment: circuitInfo.output_commitment,
              vk_hash: circuitInfo.vk_hash,
              input_commitments: circuitInfo.input_commitments,
              toggles: circuitInfo.toggles,
              output: circuitInfo.output,
              callback_addr: callbackAddress,
              input_commitments_root: circuitInfo.input_commitments_root,
              witness: circuitInfo.witness,
              max_receipts: circuitInfo.max_receipts,
              max_storage: circuitInfo.max_storage,
              max_tx: circuitInfo.max_tx,
              max_num_data_points: circuitInfo.max_num_data_points
            })
          })
        ],
        option,
        api_key: apiKey
      });
      const res = yield this.client.SendBatchQueries(req);
      if (res.has_err) {
        return new PrepareQueryResponse({
          err: new ErrMsg({
            msg: `failed to prepare query for brevis partner flow: ${res.err.msg} `
          })
        });
      }
      if (res.query_keys.length == 0) {
        return new PrepareQueryResponse({
          err: new ErrMsg({
            msg: `empty query info for brevis partner flow: ${res.err.msg} `
          })
        });
      }
      return new PrepareQueryResponse({
        query_key: res.query_keys[0],
        fee: res.fee
      });
    });
  }
  _submitProof(query_key, dstChainId, proof) {
    return __async(this, null, function* () {
      const req = new SubmitAppCircuitProofRequest({
        query_key,
        target_chain_id: dstChainId,
        proof
      });
      const res = yield this.client.SubmitAppCircuitProof(req);
      if (res.has_err) {
        throw new Error(`error while submitting proof to brevis: ${res.err.msg}`);
      }
      return res;
    });
  }
  getQueryStatus(queryKey, dstChainId) {
    return __async(this, null, function* () {
      const req = new GetQueryStatusRequest({ query_key: queryKey, target_chain_id: dstChainId });
      const res = yield this.client.GetQueryStatus(req);
      if (res.has_err) {
        throw new Error(`error while waiting for final result: ${res.err.msg}`);
      }
      return res;
    });
  }
  buildReceiptInfo(data) {
    return new ReceiptInfo({
      blk_num: data.block_num,
      transaction_hash: data.tx_hash,
      log_extract_infos: data.fields.map((f) => {
        return new LogExtractInfo({
          contract_address: f.contract,
          log_pos: f.log_pos,
          log_topic0: f.event_id,
          value_from_topic: f.is_topic,
          value_index: f.field_index,
          value: f.value
        });
      })
    });
  }
  buildStorageInfo(data) {
    return new StorageQueryInfo({
      account: data.address,
      storage_keys: [data.slot],
      blk_num: data.block_num
    });
  }
  buildTransactionInfo(data) {
    return new TransactionInfo({ transaction_hash: data.hash });
  }
};

// src/circuit-types.ts
import { ethers } from "ethers";
function asUint248(input) {
  const big = ethers.getBigInt(input);
  return { type: "Uint248", data: big.toString(10) };
}
function asUint521(input) {
  const big = ethers.getBigInt(input);
  return { type: "Uint521", data: big.toString(10) };
}
function asInt248(input) {
  const big = ethers.getBigInt(input);
  return { type: "Int248", data: big.toString(10) };
}
function asBytes32(input) {
  if (!ethers.isHexString(input)) {
    throw new Error(`value ${input} is not bytes32`);
  }
  const bs = ethers.getBytes(input);
  if (bs.length !== 32) {
    throw new Error(`asBytes32 must take bytes of length 32: actual ${bs.length}`);
  }
  return { type: "Bytes32", data: input };
}

// src/prover-client.ts
import { credentials as credentials2 } from "@grpc/grpc-js";
var Prover = class {
  constructor(url) {
    const cred = credentials2.createInsecure();
    this.client = new ProverClient(url, cred);
  }
  prove(request) {
    return __async(this, null, function* () {
      const res = yield this.client.Prove(request.build());
      return res;
    });
  }
  proveAsync(request) {
    return __async(this, null, function* () {
      const res = yield this.client.ProveAsync(request.build());
      return res;
    });
  }
  getProof(id) {
    return __async(this, null, function* () {
      const res = yield this.client.GetProof(new GetProofRequest({ proof_id: id }));
      return res;
    });
  }
};

// src/request.ts
import { ethers as ethers2 } from "ethers";
var ProofRequest = class {
  constructor() {
    this.receipts = [];
    this.storages = [];
    this.transactions = [];
  }
  getReceipts() {
    return this.receipts;
  }
  getStorages() {
    return this.storages;
  }
  getTransactions() {
    return this.transactions;
  }
  addReceipt(data, index) {
    validateReceipt(data);
    this.receipts.push(new IndexedReceipt({ index, data }));
  }
  addStorage(data, index) {
    validateStorage(data);
    this.storages.push(new IndexedStorage({ index, data }));
  }
  addTransaction(data, index) {
    validateTransaction(data);
    this.transactions.push(new IndexedTransaction({ index, data }));
  }
  setCustomInput(data) {
    this.customInput = new CustomInput({
      json_bytes: JSON.stringify(data)
    });
  }
  build() {
    if (this.customInput === void 0) {
      this.customInput = new CustomInput({ json_bytes: "{}" });
    }
    const req = new ProveRequest({
      receipts: this.receipts,
      storages: this.storages,
      transactions: this.transactions,
      custom_input: this.customInput
    });
    return req;
  }
};
function validateReceipt(d) {
  if (d.block_num < 0) err("receipt.block_num", d.block_num);
  if (!validLen(d.tx_hash)) err("transaction.tx_hash", d.tx_hash);
  d.fields.forEach((field, i) => {
    validateReceiptField(field, i);
  });
}
function validateReceiptField(d, i) {
  const field = `receipt.field[${i}]`;
  if (d.log_pos < 0) err(field + ".log_pos", d.log_pos);
  if (d.field_index < 0) err(field + ".field_index", d.field_index);
}
function validateStorage(d) {
  if (d.block_num < 0) err("storage.block_num", d.block_num);
  if (!ethers2.isAddress(d.address)) err("storage.address", d.address);
  if (!validLen(d.slot)) err("storage.slot", d.slot);
}
function validateTransaction(d) {
  if (!validLen(d.hash)) err("transaction.hash", d.hash);
}
function validLen(d) {
  if (!ethers2.isBytesLike(d)) {
    d = ethers2.toBeHex(d);
  }
  const len = ethers2.dataLength(d);
  return len > 0 && len <= 32;
}
function err(fieldName, value) {
  throw new Error(`invalid ${fieldName} ${value}`);
}
export {
  Brevis,
  ErrCode,
  Field,
  ProofRequest,
  ProveResponse,
  Prover,
  ReceiptData,
  StorageData,
  TransactionData,
  asBytes32,
  asInt248,
  asUint248,
  asUint521
};
//# sourceMappingURL=index.mjs.map